import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Text from"../../text.js";import*as Segment from"./segment.js";export class Instance extends Entity.Instance{static Min_Segment_Count(){return Instance.min_segment_count}static Set_Min_Segment_Count(e){Utils.Assert(e>=0,"min_segment_count must be greater than or equal to 0."),Instance.min_segment_count=e}constructor({buffer:e,index:t,text:n}){if(super(),this.buffer=e,this.index=t,this.text=n,this.segments=[],null==n)Utils.Assert(null==e,"buffer must be null."),Utils.Assert(null==t,"index must be null.");else if(Utils.Assert(null!=e,"buffer must not be null."),Utils.Assert(null!=t&&t>-1,"index must not be null, and must be greater than -1."),""===n.Value()){const e=new Text.Segment.Instance({segment_type:Text.Segment.Type.MACRO,index:0});e.Add_Item(new Text.Part.Instance({part_type:Text.Part.Type.POINT,index:0,value:"Â ",status:Text.Part.Status.GOOD,style:Text.Part.Style._NONE_,language:null})),this.segments.push(new Segment.Instance({line:this,index:0,text:e}))}else for(let e=0,t=n.Macro_Segment_Count();e<t;e+=1)this.segments.push(new Segment.Instance({line:this,index:e,text:n.Macro_Segment(e)}));this.Add_Dependencies(this.segments)}Buffer(){return Utils.Assert(null!=this.buffer,"Doesn't have buffer."),this.buffer}Index(){return Utils.Assert(null!=this.index,"Doesn't have an index."),this.index}Text(){return Utils.Assert(null!=this.text,"Doesn't have text."),this.text}Segment_Count(){return this.segments.length}Segment_At(e){return Utils.Assert(e>-1,`segment_index (${e}) must be greater than -1.`),e<this.Segment_Count()?this.segments[e]:Instance.blank_segment}Is_Blank(){return null==this.text}Is_New_Line(){return""===this.Text().Value()}}Instance.min_segment_count=70,Instance.blank_segment=new Segment.Instance({line:null,index:null,text:null});