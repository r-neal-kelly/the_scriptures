import*as Languages from"../../languages.js";import*as Text from"../../text.js";import*as Text_Base from"../text_base.js";import*as Line from"./line.js";import*as Column from"./column.js";import*as Row from"./row.js";import*as Segment from"./segment.js";import*as Item from"./item.js";export class Instance extends Text_Base.Instance{constructor({default_language_name:e,default_font_name:t,override_font_name:n,text:a,allow_errors:s}){super({min_line_count:50,min_column_count:1,min_row_count:1,min_segment_count:70,min_item_count:2,default_language_name:e}),this.default_font_name=t,this.override_font_name=n,this.text=a,this.Set_Blanks({blank_line:new Line.Instance({buffer:this,index:null,text:null}),blank_column:new Column.Instance({buffer:this,line:null,index:null,text:null}),blank_row:new Row.Instance({buffer:this,column:null,index:null,text:null}),blank_segment:new Segment.Instance({buffer:this,row:null,index:null,text:null}),blank_item:new Item.Instance({buffer:this,segment:null,index:null,text:null})}),s?this.text.Set_Path_Type(Text.Path.Type.DEFAULT):this.text.Set_Path_Type(Text.Path.Type.ERRORLESS);for(let e=0,t=a.Line_Count();e<t;e+=1)this.Push_Line(new Line.Instance({buffer:this,index:e,text:a.Line(e)}))}Default_Font_Name(){return this.default_font_name}Default_Font_Styles(){return Languages.Singleton().Font_Styles(this.Default_Language_Name(),this.Default_Font_Name())}Override_Font_Name(e){return this.override_font_name(e)}Override_Font_Styles(e){return Languages.Singleton().Font_Styles(e,this.Override_Font_Name(e))}Text(){return this.text}Allows_Errors(){return this.Text().Path_Type()===Text.Path.Type.DEFAULT}}