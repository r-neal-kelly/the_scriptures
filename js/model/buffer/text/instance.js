import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Languages from"../../languages.js";import*as Text from"../../text.js";import*as Line from"./line.js";export class Instance extends Entity.Instance{static Min_Line_Count(){return Instance.min_line_count}static Set_Min_Line_Count(e){Utils.Assert(e>=0,"min_line_count must be greater than or equal to 0."),Instance.min_line_count=e}constructor({default_language_name:e,default_font_name:t,language_font_name:n,text:a,allow_errors:i}){super(),this.default_language_name=e,this.default_font_name=t,this.language_font_name=n,this.text=a,this.lines=[],this.line_path_type=i?Text.Line.Path_Type.DEFAULT:Text.Line.Path_Type.ERRORLESS;for(let e=0,t=a.Line_Count();e<t;e+=1)this.lines.push(new Line.Instance({buffer:this,index:e,text:a.Line(e)}));this.Add_Dependencies(this.lines)}Default_Language_Name(){return this.default_language_name}Default_Font_Name(){return this.default_font_name}Language_Font_Name(e){return this.language_font_name(e)}Default_Text_Direction(){return Languages.Singleton().Direction(this.default_language_name)}Default_Font_Styles(){return Languages.Singleton().Font_Styles(this.Default_Language_Name(),this.Default_Font_Name())}Override_Font_Styles(e){return Languages.Singleton().Font_Styles(e,this.Language_Font_Name(e))}Text(){return this.text}Line_Count(){return this.lines.length}Line_At(e){return Utils.Assert(e>-1,`line_index (${e}) must be greater than -1.`),e<this.Line_Count()?this.lines[e]:Instance.blank_line}Line_Path_Type(){return this.line_path_type}Allows_Errors(){return this.Line_Path_Type()===Text.Line.Path_Type.DEFAULT}Indent_EM(){return 3}Pad_EM(e){return e>0?this.Indent_EM()*e:0}}Instance.min_line_count=50,Instance.blank_line=new Line.Instance({buffer:null,index:null,text:null});