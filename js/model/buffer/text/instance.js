import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Languages from"../../languages.js";import*as Text from"../../text.js";import*as Line from"./line.js";export class Instance extends Entity.Instance{static Min_Line_Count(){return Instance.min_line_count}static Set_Min_Line_Count(t){0,Instance.min_line_count=t}constructor({default_language_name:t,default_font_name:e,language_font_name:n,text:a,allow_errors:i}){super(),this.default_language_name=t,this.default_font_name=e,this.language_font_name=n,this.text=a,this.lines=[],this.line_path_type=i?Text.Path.Type.DEFAULT:Text.Path.Type.ERRORLESS;for(let t=0,e=a.Line_Count();t<e;t+=1)this.lines.push(new Line.Instance({buffer:this,index:t,text:a.Line(t)}));this.Add_Dependencies(this.lines)}Default_Language_Name(){return this.default_language_name}Default_Font_Name(){return this.default_font_name}Language_Font_Name(t){return this.language_font_name(t)}Default_Text_Direction(){return Languages.Singleton().Direction(this.default_language_name)}Default_Font_Styles(){return Languages.Singleton().Font_Styles(this.Default_Language_Name(),this.Default_Font_Name())}Override_Font_Styles(t){return Languages.Singleton().Font_Styles(t,this.Language_Font_Name(t))}Text(){return this.text}Line_Count(){return this.lines.length}Line_At(t){return 0,t<this.Line_Count()?this.lines[t]:Instance.blank_line}Line_Path_Type(){return this.line_path_type}Allows_Errors(){return this.Line_Path_Type()===Text.Path.Type.DEFAULT}Indent_EM(){return 3}Pad_EM(t){return t>0?this.Indent_EM()*t:0}}Instance.min_line_count=50,Instance.blank_line=new Line.Instance({buffer:null,index:null,text:null});