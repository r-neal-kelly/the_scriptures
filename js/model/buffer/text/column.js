import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Row from"./row.js";export class Instance extends Entity.Instance{static Min_Row_Count(){return Instance.min_row_count}static Set_Min_Row_Count(t){0,Instance.min_row_count=t}constructor({line:t,index:n,text:s}){if(super(),this.line=t,this.index=n,this.text=s,this.rows=[],null==s)0,0;else{0,0;for(let t=0,n=s.Row_Count();t<n;t+=1)this.rows.push(new Row.Instance({column:this,index:t,text:s.Row(t)}))}this.Add_Dependencies(this.rows)}Line(){return 0,this.line}Index(){return 0,this.index}Has_Text(){return null!=this.text}Text(){return 0,this.text}Row_Count(){return this.rows.length}Row_At(t){return 0,t<this.Row_Count()?this.rows[t]:Instance.blank_row}Is_Blank(){return null==this.text}Is_Marginal(){return 0,this.Text().Is_Marginal()}Is_Inter_Marginal(){return 0,this.Text().Is_Inter_Marginal()}Is_Interlinear(){return 0,this.Text().Is_Interlinear()}Is_Inter_Interlinear(){return 0,this.Text().Is_Inter_Interlinear()}Has_Styles(){return this.Has_Text()}Styles(){if(this.Has_Styles()){const t=this.Text();return t.Is_Interlinear()||t.Is_Inter_Interlinear()?`\n                    grid-template-rows: repeat(${t.Row_Count()}, 1fr);\n                `:`\n                    grid-template-rows: repeat(${t.Row_Count()}, min-content);\n                `}return""}}Instance.min_row_count=1,Instance.blank_row=new Row.Instance({column:null,index:null,text:null});