import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Row from"./row.js";export class Instance extends Entity.Instance{constructor({buffer:t,line:s,index:e,text:n}){if(super(),this.buffer=t,this.line=s,this.index=e,this.text=n,this.rows=[],null==n)0,0;else{0,0;for(let t=0,s=n.Row_Count();t<s;t+=1)this.rows.push(new Row.Instance({buffer:this.buffer,column:this,index:t,text:n.Row(t)}))}this.Add_Dependencies(this.rows)}Buffer(){return this.buffer}Line(){return 0,this.line}Index(){return 0,this.index}Has_Text(){return null!=this.text}Text(){return 0,this.text}Min_Row_Count(){return this.Buffer().Min_Row_Count()}Row_Count(){return this.rows.length}Row_At(t){return 0,t<this.Row_Count()?this.rows[t]:this.Buffer().Blank_Row()}Is_Blank(){return null==this.text}Is_Marginal(){return 0,this.Text().Is_Marginal()}Is_Inter_Marginal(){return 0,this.Text().Is_Inter_Marginal()}Is_Interlinear(){return 0,this.Text().Is_Interlinear()}Is_Inter_Interlinear(){return 0,this.Text().Is_Inter_Interlinear()}Has_Styles(){return this.Has_Text()}Styles(){if(this.Has_Styles()){const t=this.Text();return t.Is_Interlinear()||t.Is_Inter_Interlinear()?`\n                    grid-template-rows: repeat(${t.Row_Count()}, 1fr);\n                `:`\n                    grid-template-rows: repeat(${t.Row_Count()}, min-content);\n                `}return""}}