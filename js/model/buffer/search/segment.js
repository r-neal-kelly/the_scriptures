import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Point from"./point.js";export class Instance extends Entity.Instance{static Min_Point_Count(){return Instance.min_point_count}static Set_Min_Point_Count(t){Utils.Assert(t>=0,"min_point_count must be greater than or equal to 0."),Instance.min_point_count=t}constructor({line:t,index:n,text:e}){if(super(),this.line=t,this.index=n,this.text=e,this.points=[],null==e)Utils.Assert(null==t,"line must be null."),Utils.Assert(null==n,"index must be null.");else{Utils.Assert(null!=t,"line must not be null."),Utils.Assert(null!=n&&n>-1,"index must not be null, and must be greater than -1.");for(let t=0,n=e.Item_Count();t<n;t+=1)this.points.push(new Point.Instance({segment:this,index:t,text:e.Item(t)}))}this.Add_Dependencies(this.points)}Line(){return Utils.Assert(null!=this.line,"Doesn't have line."),this.line}Index(){return Utils.Assert(null!=this.index,"Doesn't have an index."),this.index}Text(){return Utils.Assert(null!=this.text,"Doesn't have text."),this.text}Point_Count(){return this.points.length}Point_At(t){return Utils.Assert(t>-1,`point_index (${t}) must be greater than -1.`),t<this.Point_Count()?this.points[t]:Instance.blank_point}Is_Blank(){return null==this.text}}Instance.min_point_count=8,Instance.blank_point=new Point.Instance({segment:null,index:null,text:null});