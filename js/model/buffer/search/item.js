import*as Utils from"../../../utils.js";import*as Text_Base from"../text_base.js";import*as Division from"./division.js";export class Instance extends Text_Base.Item.Instance{constructor({segment:i,index:s,text:t}){super({segment:i,index:s,text:t}),this.divisions=[],this.Is_Blank()||this.divisions.push(new Division.Instance({item:this,index:0,value:this.Text().Value(),is_highlighted:!1}))}Result(){return 0,this.Segment().Result()}Min_Division_Count(){return Instance.min_division_count}Division_Count(){return this.divisions.length}Blank_Division(i){return new Division.Instance({item:this,index:i,value:null,is_highlighted:!1})}Division_At(i){return 0,i<this.Division_Count()?this.divisions[i]:this.Blank_Division(i)}Highlight({first_unit_index:i,end_unit_index:s}){0;const t=this.Text().Value();if(1===this.Division_Count())0===i&&s===t.length?this.Division_At(0).Set_Highlight(!0):0===i||s===t.length?0===i?(this.Division_At(0).Set_Value(t.slice(i,s)),this.Division_At(0).Set_Highlight(!0),this.divisions.push(new Division.Instance({item:this,index:1,value:t.slice(s,t.length),is_highlighted:!1}))):(this.Division_At(0).Set_Value(t.slice(0,i)),this.divisions.push(new Division.Instance({item:this,index:1,value:t.slice(i,s),is_highlighted:!0}))):(this.Division_At(0).Set_Value(t.slice(0,i)),this.divisions.push(new Division.Instance({item:this,index:1,value:t.slice(i,s),is_highlighted:!0})),this.divisions.push(new Division.Instance({item:this,index:2,value:t.slice(s,t.length),is_highlighted:!1})));else{const t=this.divisions;this.divisions=[];for(const i of t){const s=i.Is_Highlighted();for(const t of i.Value())this.divisions.push(new Division.Instance({item:this,index:this.divisions.length,value:t,is_highlighted:s}))}for(let t=i,n=s;t<n;t+=1)this.Division_At(t).Set_Highlight(!0)}}}Instance.min_division_count=1;