import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Text from"../../text.js";import*as Segment from"./segment.js";export class Instance extends Entity.Instance{static Min_Segment_Count(){return Instance.min_segment_count}static Set_Min_Segment_Count(e){Utils.Assert(e>=0,"min_segment_count must be greater than or equal to 0."),Instance.min_segment_count=e}constructor({buffer:e,index:t,result:n}){if(super(),this.buffer=e,this.index=t,this.result=n,this.segments=[],null==n)Utils.Assert(null==e,"buffer must be null."),Utils.Assert(null==t,"index must be null.");else if(Utils.Assert(null!=e,"buffer must not be null."),Utils.Assert(null!=t&&t>-1,"index must not be null, and must be greater than -1."),""===n.Line().Value()){const e=new Text.Segment.Instance({segment_type:Text.Segment.Type.MICRO,index:0});e.Add_Item(new Text.Part.Instance({part_type:Text.Part.Type.POINT,index:0,value:"Â ",status:Text.Part.Status.GOOD,style:Text.Part.Style._NONE_})),this.segments.push(new Segment.Instance({line:this,index:0,text:e}))}else{for(let e=0,t=n.Line().Macro_Segment_Count();e<t;e+=1)this.segments.push(new Segment.Instance({line:this,index:e,text:n.Line().Macro_Segment(e)}));for(let e=0,t=n.Match_Count();e<t;e+=1){const t=n.Match(e),s=t.First_Part_Index(),i=t.Last_Part_Index();{t.First_Part_First_Unit_Index();const e=n.Line().Macro_Part_Segment_Item_Indices(s);for(let t=0,n=e.length;t<n;t+=1){const{segment_index:n,item_index:s}=e[t]}}for(let e=s+1,t=i;e<t;e+=1){const t=n.Line().Macro_Part_Segment_Item_Indices(e);for(let e=0,n=t.length;e<n;e+=1){const{segment_index:n,item_index:s}=t[e]}}{t.Last_Part_End_Unit_Index();const e=n.Line().Macro_Part_Segment_Item_Indices(i);for(let t=0,n=e.length;t<n;t+=1){const{segment_index:n,item_index:s}=e[t]}}}}this.Add_Dependencies(this.segments)}Buffer(){return Utils.Assert(null!=this.buffer,"Doesn't have buffer."),this.buffer}Index(){return Utils.Assert(null!=this.index,"Doesn't have an index."),this.index}Result(){return Utils.Assert(null!=this.result,"Doesn't have result."),this.result}Segment_Count(){return this.segments.length}Segment_At(e){return Utils.Assert(e>-1,`segment_index (${e}) must be greater than -1.`),e<this.Segment_Count()?this.segments[e]:Instance.blank_segment}Is_Blank(){return null==this.result}Is_New_Line(){return""===this.Result().Line().Value()}}Instance.min_segment_count=70,Instance.blank_segment=new Segment.Instance({line:null,index:null,text:null});