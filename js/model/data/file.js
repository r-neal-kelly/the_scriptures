var __awaiter=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function a(t){try{h(i.next(t))}catch(t){r(t)}}function o(t){try{h(i.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}h((i=i.apply(t,e||[])).next())}))};import*as Utils from"../../utils.js";import*as Entity from"../entity.js";import*as Text from"../text.js";export class Instance extends Entity.Instance{constructor({version:t,leaf:e}){super(),this.version=t,this.name=e.name.replace(/\.[^.]*$/,""),this.index=e.index,this.path=`${t.Path()}/${e.name}`,this.text=null,this.Add_Dependencies([])}Version(){return this.version}Name(){return this.name}Index(){return this.index}Path(){return this.path}Text(){return __awaiter(this,void 0,void 0,(function*(){return yield this.Ready(),this.text}))}After_Dependencies_Are_Ready(){return __awaiter(this,void 0,void 0,(function*(){let t;const e=yield fetch(Utils.Resolve_Path(this.Path()));t=e.ok?yield e.text():null;const n=(yield this.Version().Dictionary()).Text_Dictionary(),i=this.Version().Language().Book().Data().Compressor();this.text=new Text.Instance({dictionary:n,value:i.Decompress({value:t||"",dictionary:n})})}))}}