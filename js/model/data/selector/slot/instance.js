import*as Utils from"../../../../utils.js";import*as Entity from"../../../entity.js";import{Type}from"./type.js";import*as Item from"./item.js";export class Instance extends Entity.Instance{constructor({selector:t,index:e,type:s,item_names:i,item_files:n}){super(),this.selector=t,this.index=e,this.type=s,s===Type.BOOKS?this.title="Books":s===Type.LANGUAGES?this.title="Languages":s===Type.VERSIONS?this.title="Versions":s===Type.FILES?this.title="Files":(Utils.Assert(!1,"Invalid type."),this.title=""),this.items=[],this.selected_item=null;for(let t=0,e=i.length;t<e;t+=1)this.items.push(new Item.Instance({slot:this,index:t,name:i[t],file:null!=n?n[t]:null}));this.Add_Dependencies(this.items)}Selector(){return this.selector}Index(){return this.index}Type(){return this.type}Title(){return this.title}Has_Item(t){return this.items.includes(t)}Item_Count(){return this.items.length}Item_At_Index(t){return Utils.Assert(t>-1,"item_index must be greater than -1."),Utils.Assert(t<this.Item_Count(),"item_index must be less than item_count."),this.items[t]}Maybe_Item_From_Name(t){for(let e=0,s=this.Item_Count();e<s;e+=1){const s=this.Item_At_Index(e);if(s.Name()===t)return s}return null}Item_From_Name(t){const e=this.Maybe_Item_From_Name(t);return Utils.Assert(null!=e,`Does not have an item with the name of ${t}.`),e}Items(){return Array.from(this.items)}Has_Selected_Item(){return null!=this.selected_item}Selected_Item(){return Utils.Assert(this.Has_Selected_Item(),"Has no selected_item."),this.selected_item}__Select_Item__({item:t}){Utils.Assert(this.Has_Item(t),"The item does not belong to this slot."),this.selected_item=t,t.__Select__()}Select_Item(t){this.Selector().__Select_Item__({slot:this,slot_item:t})}}