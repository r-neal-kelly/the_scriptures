var __awaiter=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,r){function o(t){try{h(s.next(t))}catch(t){r(t)}}function a(t){try{h(s.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}h((s=s.apply(t,e||[])).next())}))};import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Compressor from"../compressor.js";import*as Dictionary from"./dictionary.js";import*as Text from"./text.js";import*as File from"../file.js";export var Symbol;!function(t){t.FILE_BREAK="\n~~~FILE_BREAK~~~\n"}(Symbol||(Symbol={}));export class Instance extends Entity.Instance{constructor({language:t,branch:e}){super(),this.language=t,this.name=e.name,this.path=`${t.Path()}/${e.name}`,this.compressor=null,this.dictionary=new Dictionary.Instance({version:this}),this.text=new Text.Instance({version:this}),this.files=[];for(let t=0,i=e.files.length;t<i;t+=1)this.files.push(new File.Instance({version:this,name:e.files[t],index:t}));this.Add_Dependencies([])}Language(){return this.language}Name(){return this.name}Path(){return this.path}Compressor({fetch_attempt_count:t,fetch_attempt_limit:e}={fetch_attempt_count:0,fetch_attempt_limit:3}){return __awaiter(this,void 0,void 0,(function*(){if(null!=this.compressor)return this.compressor;if(t<e){const i=yield fetch(Utils.Resolve_Path(`${this.Path()}/Unique_Parts.json`));return i.ok?(this.compressor=new Compressor.Instance({unique_parts:JSON.parse(yield i.text())}),this.compressor):yield this.Compressor({fetch_attempt_count:t+1,fetch_attempt_limit:e})}return new Compressor.Instance({unique_parts:[]})}))}Dictionary(){return __awaiter(this,void 0,void 0,(function*(){return yield this.dictionary.Ready(),this.dictionary}))}Text(){return __awaiter(this,void 0,void 0,(function*(){return yield this.text.Ready(),this.text}))}File(t){for(const e of this.files)if(e.Name()===t)return e;return Utils.Assert(!1,"Invalid file_name."),this.files[0]}File_Count(){return this.files.length}File_At(t){return Utils.Assert(t>-1,"file_index must be greater than -1."),Utils.Assert(t<this.File_Count(),"file_index must be less than file_count."),this.files[t]}Files(){return Array.from(this.files)}}