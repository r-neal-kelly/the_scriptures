var __awaiter=this&&this.__awaiter||function(t,i,e,n){return new(e||(e=Promise))((function(s,r){function a(t){try{h(n.next(t))}catch(t){r(t)}}function o(t){try{h(n.throw(t))}catch(t){r(t)}}function h(t){var i;t.done?s(t.value):(i=t.value,i instanceof e?i:new e((function(t){t(i)}))).then(a,o)}h((n=n.apply(t,i||[])).next())}))};import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Dictionary from"./dictionary.js";import*as Text from"./text.js";import*as File from"../file.js";export var Symbol;!function(t){t.FILE_BREAK="\n~~~FILE_BREAK~~~\n"}(Symbol||(Symbol={}));export class Instance extends Entity.Instance{constructor({language:t,branch:i}){super(),this.language=t,this.name=i.name,this.path=`${t.Path()}/${i.name}`,this.dictionary=new Dictionary.Instance({version:this}),this.text=new Text.Instance({version:this}),this.files=[];for(const t of i.files)this.files.push(new File.Instance({version:this,leaf:t}));this.Add_Dependencies([])}Language(){return this.language}Name(){return this.name}Path(){return this.path}Dictionary(){return __awaiter(this,void 0,void 0,(function*(){return yield this.dictionary.Ready(),this.dictionary}))}Text(){return __awaiter(this,void 0,void 0,(function*(){return yield this.text.Ready(),this.text}))}File(t){for(const i of this.files)if(i.Name()===t)return i;return Utils.Assert(!1,"Invalid file_name."),this.files[0]}File_Count(){return this.files.length}File_At(t){return Utils.Assert(t>-1,"file_index must be greater than -1."),Utils.Assert(t<this.File_Count(),"file_index must be less than file_count."),this.files[t]}Files(){return Array.from(this.files)}}