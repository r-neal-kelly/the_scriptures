import*as Utils from"../../../utils.js";import*as Unicode from"../../../unicode.js";import*as Compression_Tools from"./compression_tools.js";import{Compressed_Symbol}from"./compressed_symbol.js";const ZERO=String.fromCodePoint(0),ONE=String.fromCodePoint(1),QUOTE='"',COMMA=",";export class Instance{constructor({unique_parts:o=[]}={}){0,this.indices_to_values={};for(let t=0,s=o.length;t<s;t+=1)this.indices_to_values[Compression_Tools.Compressed_Index(t)]=o[t]}Decompress_Dictionary({dictionary_value:o}){let t="",s=new Unicode.Iterator({text:o}),e=!1;for(;!s.Is_At_End();s=s.Next())e?s.Point()===ZERO?e=!1:(0,t+='"',t+=this.indices_to_values[s.Point().codePointAt(0)],t+='"',t+=","):s.Point()===ZERO?e=!0:s.Point()===ONE?(s=s.Next(),0,t+='"',t+=this.indices_to_values[s.Point().codePointAt(0)],t+='"'):t+=s.Point();return t}Decompress_File({dictionary:o,file_value:t}){const s=[];let e=new Unicode.Iterator({text:t}),n=!1;for(;!e.Is_At_End();e=e.Next())if(e.Point().codePointAt(0)===Compressed_Symbol.VERBATIM_OPEN){const o=e.Next();for(e=o;e.Point().codePointAt(0)!==Compressed_Symbol.VERBATIM_CLOSE;)e=e.Next();s.push(o.Points().slice(0,e.Index()-o.Index())),n=!1}else if(e.Point().codePointAt(0)===Compressed_Symbol.NEWLINE)s.push("\n"),n=!1;else{0;const t=this.indices_to_values[e.Point().codePointAt(0)];o.Is_Word(t)||o.Is_Word_Error(t)?(n&&s.push(" "),s.push(t),n=!0):(s.push(t),n=!1)}return s.join("")}}