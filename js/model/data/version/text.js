var __awaiter=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,r){function o(t){try{a(s.next(t))}catch(t){r(t)}}function l(t){try{a(s.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,l)}a((s=s.apply(t,e||[])).next())}))};import*as Utils from"../../../utils.js";import*as Async from"../../../async.js";import*as Text from"../../text.js";import*as Version from"./instance.js";export var Symbol;!function(t){t.NAME="Text",t.EXTENSION="comp"}(Symbol||(Symbol={}));export class Instance extends Async.Instance{constructor({version:t}){super(),this.version=t,this.path=`${t.Path()}/${Symbol.NAME}.${Symbol.EXTENSION}`,this.file_texts=[],this.Add_Dependencies([this.Version()])}Version(){return this.version}Name(){return Symbol.NAME}Path(){return this.path}Extension(){return Symbol.EXTENSION}File_Text_Count(){return this.file_texts.length}File_Text_At(t){return    this.file_texts[t]}After_Dependencies_Are_Ready(){return __awaiter(this,void 0,void 0,(function*(){let t;const e=yield fetch(Utils.Resolve_Path(this.Path()));if(t=e.ok?yield e.text():null,null!=t){const e=(yield this.Version().Dictionary()).Text_Dictionary(),i=yield this.Version().Compressor();for(const s of i.Decompress_File({dictionary:e,file_value:t}).split(Version.Symbol.FILE_BREAK))this.file_texts.push(new Text.Instance({dictionary:e,value:s}))}}))}}