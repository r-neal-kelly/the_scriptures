var __awaiter=this&&this.__awaiter||function(t,e,n,s){return new(n||(n=Promise))((function(i,r){function o(t){try{l(s.next(t))}catch(t){r(t)}}function a(t){try{l(s.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}l((s=s.apply(t,e||[])).next())}))};import*as Utils from"../../../utils.js";import*as Async from"../../../async.js";import*as Text from"../../text.js";import*as Version from"./instance.js";export var Symbol;!function(t){t.NAME="Text.comp",t.TITLE="Text",t.EXTENSION="comp"}(Symbol||(Symbol={}));export class Instance extends Async.Instance{constructor({version:t}){super(),this.version=t,this.path=`${t.Path()}/${Symbol.NAME}`,this.text_files=[],this.Add_Dependencies([this.Version().Language().Book().Data()])}Version(){return this.version}Name(){return Symbol.NAME}Path(){return this.path}Title(){return Symbol.TITLE}Extension(){return Symbol.EXTENSION}Text_File_Count(){return this.text_files.length}Text_File_At(t){return Utils.Assert(this.Is_Ready(),"Not ready."),Utils.Assert(t>-1,"text_file_index must be greater than -1."),Utils.Assert(t<this.Text_File_Count(),"text_file_index must be less than text_file_count."),this.text_files[t]}After_Dependencies_Are_Ready(){return __awaiter(this,void 0,void 0,(function*(){let t;const e=yield fetch(Utils.Resolve_Path(this.Path()));if(t=e.ok?yield e.text():null,null!=t){const e=(yield this.Version().Dictionary()).Text_Dictionary(),n=this.Version().Language().Book().Data().Compressor();for(const s of n.Decompress({value:t,dictionary:e}).split(Version.Symbol.FILE_BREAK))this.text_files.push(new Text.Instance({dictionary:e,value:s.replace(/\r?\n\r?\n/g,"\nÂ \n")}))}}))}}