import*as Utils from"../../../utils.js";import*as Text from"../../text.js";import{Compressed_Symbol}from"./compressed_symbol.js";export class Instance{constructor({unique_parts:o=[]}={}){0,this.indices={};for(let t=0,s=o.length;t<s;t+=1){const s=t+Compressed_Symbol._COUNT_;this.indices[o[t]]=s}}Compress_Dictionary({dictionary_value:o}){const t=String.fromCodePoint(0),s=String.fromCodePoint(1),e='"';let i="",n=!1,r=!1,c=0;for(let l=0,m=o.length;l<m;l+=1){const a=o[l];if(0,n){if("\\"===a&&l+1<m&&o[l+1]===e)l+=1;else if(a===e){const a=o.slice(c,l);this.indices.hasOwnProperty(a)?l+1<m&&","===o[l+1]?(r||(i+=t,r=!0),i+=String.fromCodePoint(this.indices[a]),l+=1):(r&&(i+=t,r=!1),i+=s,i+=String.fromCodePoint(this.indices[a])):(r&&(i+=t,r=!1),i+=e,i+=a,i+=e),n=!1,c=0}}else a===e?(n=!0,c=l+1):(r&&(i+=t,r=!1),i+=a)}return i}Compress_File({dictionary:o,file_value:t}){const s=[],e=String.fromCodePoint(Compressed_Symbol.NEWLINE),i=String.fromCodePoint(Compressed_Symbol.VERBATIM_OPEN),n=String.fromCodePoint(Compressed_Symbol.VERBATIM_CLOSE),r=new Text.Instance({dictionary:o,value:t});for(let o=0,t=r.Line_Count();o<t;o+=1){const c=r.Line(o);for(let o=0,t=c.Column_Count();o<t;o+=1){const t=c.Column(o);for(let o=0,e=t.Row_Count();o<e;o+=1){const e=t.Row(o);let r=!1;for(let o=0,t=e.Macro_Part_Count();o<t;o+=1){const c=e.Macro_Part(o),l=c.Value();if(this.indices.hasOwnProperty(l)){const i=String.fromCodePoint(this.indices[l]);c.Is_Word()?(s.push(i),r=!0):(" "===l&&r&&o+1<t&&e.Macro_Part(o+1).Is_Word()||s.push(i),r=!1)}else s[s.length-1]===n?s.pop():s.push(i),s.push(l),s.push(n),r=!1}}}o<t-1&&s.push(e)}return s.join("")}}