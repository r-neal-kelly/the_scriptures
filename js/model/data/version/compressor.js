import*as Utils from"../../../utils.js";import*as Text from"../../text.js";import*as Compression_Tools from"./compression_tools.js";import{Compressed_Symbol}from"./compressed_symbol.js";const ZERO=String.fromCodePoint(0),ONE=String.fromCodePoint(1),QUOTE='"',COMMA=",",ESCAPE="\\",NEWLINE=String.fromCodePoint(Compressed_Symbol.NEWLINE),VERBATIM_CLOSE=String.fromCodePoint(Compressed_Symbol.VERBATIM_CLOSE);export class Instance{constructor({unique_parts:o=[]}={}){0,this.values_to_indices={};for(let s=0,t=o.length;s<t;s+=1)this.values_to_indices[o[s]]=Compression_Tools.Compressed_Index(s)}Compress_Dictionary({dictionary_value:o}){let s="",t=!1,e=!1,r=0;for(let i=0,n=o.length;i<n;i+=1){const _=o[i];if(0,t){if("\\"===_&&i+1<n&&'"'===o[i+1])i+=1;else if('"'===_){const _=o.slice(r,i);this.values_to_indices.hasOwnProperty(_)?i+1<n&&","===o[i+1]?(e||(s+=ZERO,e=!0),s+=String.fromCodePoint(this.values_to_indices[_]),i+=1):(e&&(s+=ZERO,e=!1),s+=ONE,s+=String.fromCodePoint(this.values_to_indices[_])):(e&&(s+=ZERO,e=!1),s+='"',s+=_,s+='"'),t=!1,r=0}}else'"'===_?(t=!0,r=i+1):(e&&(s+=ZERO,e=!1),s+=_)}return s}Compress_File({dictionary:o,file_value:s}){const t=[],e=new Text.Instance({dictionary:o,value:s});for(let o=0,s=e.Line_Count();o<s;o+=1){const r=e.Line(o);for(let o=0,s=r.Column_Count();o<s;o+=1){const s=r.Column(o);for(let o=0,e=s.Row_Count();o<e;o+=1){const e=s.Row(o);let r=!1;for(let o=0,s=e.Macro_Part_Count();o<s;o+=1){const i=e.Macro_Part(o),n=i.Value();if(this.values_to_indices.hasOwnProperty(n)){const _=String.fromCodePoint(this.values_to_indices[n]);i.Is_Word()?(t.push(_),r=!0):(" "===n&&r&&o+1<s&&e.Macro_Part(o+1).Is_Word()||t.push(_),r=!1)}else t[t.length-1]===VERBATIM_CLOSE?t.pop():t.push(VERBATIM_CLOSE),t.push(n),t.push(VERBATIM_CLOSE),r=!1}}}o<s-1&&t.push(NEWLINE)}return t.join("")}}