var __awaiter=this&&this.__awaiter||function(t,e,s,i){return new(s||(s=Promise))((function(n,r){function l(t){try{a(i.next(t))}catch(t){r(t)}}function o(t){try{a(i.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(l,o)}a((i=i.apply(t,e||[])).next())}))};import*as Utils from"../../../../../utils.js";import*as Entity from"../../../../entity.js";import*as Item from"./item.js";export class Instance extends Entity.Instance{constructor({slot:t,item_names:e,item_files:s}){super(),this.slot=t,this.items=[],this.selected=null;for(let t=0,i=e.length;t<i;t+=1)this.items.push(new Item.Instance({items:this,index:t,name:e[t],file:null!=s?s[t]:null}));this.Add_Dependencies(this.items)}Slot(){return this.slot}Has(t){return this.items.includes(t)}Count(){return this.items.length}At(t){return Utils.Assert(t>-1,"item_index must be greater than -1."),Utils.Assert(t<this.Count(),"item_index must be less than item_count."),this.items[t]}Maybe_From(t){for(let e=0,s=this.Count();e<s;e+=1){const s=this.At(e);if(s.Name()===t)return s}return null}From(t){const e=this.Maybe_From(t);return Utils.Assert(null!=e,`Does not have an item with the name of ${t}.`),e}Array(){return Array.from(this.items)}Has_Selected(){return null!=this.selected}Selected(){return Utils.Assert(this.Has_Selected(),"Has no selected item."),this.selected}Select(t){return __awaiter(this,void 0,void 0,(function*(){Utils.Assert(this.Has(t),"The item does not belong to this slot."),this.selected=t,yield this.Slot().Slots().Select_Item_Internally({slot:this.Slot()})}))}}