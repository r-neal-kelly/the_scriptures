import*as Utils from"../../../../../utils.js";import*as Entity from"../../../../entity.js";import*as Segment from"./segment.js";export class Instance extends Entity.Instance{static Min_Segment_Count(){return Instance.min_segment_count}static Set_Min_Segment_Count(t){Utils.Assert(t>=0,"min_segment_count must be greater than or equal to 0."),Instance.min_segment_count=t}constructor({file:t,index:e,text:n}){if(super(),this.file=t,this.index=e,this.text=n,this.segments=[],null==n)Utils.Assert(null==t,"file must be null."),Utils.Assert(null==e,"index must be null.");else{Utils.Assert(null!=t,"file must not be null."),Utils.Assert(null!=e&&e>-1,"index must not be null, and must be greater than -1.");for(let t=0,e=n.Macro_Segment_Count();t<e;t+=1)this.segments.push(new Segment.Instance({line:this,index:t,text:n.Macro_Segment(t)}))}this.Add_Dependencies(this.segments)}File(){return Utils.Assert(null!=this.file,"Doesn't have file."),this.file}Index(){return Utils.Assert(null!=this.index,"Doesn't have an index."),this.index}Text(){return Utils.Assert(null!=this.text,"Doesn't have text."),this.text}Segment_Count(){return this.segments.length}Segment_At(t){return Utils.Assert(t>-1,`segment_index (${t}) must be greater than -1.`),t<this.Segment_Count()?this.segments[t]:Instance.blank_segment}Is_Blank(){return null==this.text}}Instance.min_segment_count=70,Instance.blank_segment=new Segment.Instance({line:null,index:null,text:null});