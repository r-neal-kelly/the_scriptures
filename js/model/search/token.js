export var Type;!function(e){e[e.OPEN_GROUP=0]="OPEN_GROUP",e[e.CLOSE_GROUP=1]="CLOSE_GROUP",e[e.OPEN_SEQUENCE=2]="OPEN_SEQUENCE",e[e.CLOSE_SEQUENCE=3]="CLOSE_SEQUENCE",e[e.NOT=4]="NOT",e[e.CASE=5]="CASE",e[e.ALIGN=6]="ALIGN",e[e.AND=7]="AND",e[e.XOR=8]="XOR",e[e.OR=9]="OR",e[e.TEXT=10]="TEXT"}(Type||(Type={}));export class Instance{constructor({type:e}){this.type=e}Type(){return this.type}}export class Operator extends Instance{}export class Open_Group extends Operator{constructor(){super({type:Type.OPEN_GROUP})}}export class Close_Group extends Operator{constructor(){super({type:Type.CLOSE_GROUP})}}export class Open_Sequence extends Operator{constructor(){super({type:Type.OPEN_SEQUENCE})}}export class Close_Sequence extends Operator{constructor(){super({type:Type.CLOSE_SEQUENCE})}}export class Not extends Operator{constructor(){super({type:Type.NOT})}}export class Case extends Operator{constructor(){super({type:Type.CASE})}}export class Align extends Operator{constructor(){super({type:Type.ALIGN})}}export class And extends Operator{constructor(){super({type:Type.AND})}}export class Xor extends Operator{constructor(){super({type:Type.XOR})}}export class Or extends Operator{constructor(){super({type:Type.OR})}}export class Text extends Instance{constructor(e){super({type:Type.TEXT}),this.value=e}Value(){return this.value}}