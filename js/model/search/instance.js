var __awaiter=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((i=i.apply(t,e||[])).next())}))};import*as Utils from"../../utils.js";import*as Entity from"../entity.js";import*as Data from"../data.js";import*as Text from"../text.js";import*as Parser from"./parser.js";import*as Executor from"./executor.js";export class Instance extends Entity.Instance{constructor(){super(),this.executor=new Executor.Instance,this.Add_Dependencies([Data.Singleton()])}Value(t,e,n){return this.Text(new Text.Instance({dictionary:e,value:t}),n)}Text(t,e){return this.executor.Execute(e,t)}Data_File(t,e){return __awaiter(this,void 0,void 0,(function*(){return this.Text(yield t.Text(),e)}))}Data_Version(t,e,n,i){return __awaiter(this,void 0,void 0,(function*(){const o=new Map;i.Has_Total_Count()||i.Set_Total_Count(t.File_Count()),yield t.Cache_Files();for(let r=0,s=t.File_Count();r<s;r+=1){const s=yield this.Data_File(t.File_At(r),e);if(s instanceof Parser.Help)return s;s.length>0&&o.set(t.File_At(r),s),i.Increment_Done_Count(),yield Utils.Wait_Milliseconds(n)}return o}))}Data_Versions(t,e,n,i){return __awaiter(this,void 0,void 0,(function*(){const o=new Map;if(!i.Has_Total_Count()){let e=0;for(const n of t)e+=n.File_Count();i.Set_Total_Count(e)}for(const r of t){const t=yield this.Data_Version(r,e,Math.round(n/r.File_Count()),i);if(t instanceof Parser.Help)return t;t.size>0&&o.set(r,t)}return o}))}}let singleton=null;export function Singleton(){return null==singleton&&(singleton=new Instance),singleton}