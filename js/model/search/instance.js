var __awaiter=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{c(r.next(t))}catch(t){a(t)}}function s(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}c((r=r.apply(t,e||[])).next())}))};import*as Entity from"../entity.js";import*as Data from"../data.js";import*as Text from"../text.js";import*as Parser from"./parser.js";import*as Executor from"./executor.js";export class Instance extends Entity.Instance{constructor(){super(),this.executor=new Executor.Instance,this.Add_Dependencies([Data.Singleton()])}Value(t,e,n){return this.Text(new Text.Instance({dictionary:e,value:t}),n)}Text(t,e){return this.executor.Execute(e,t)}Data_File(t,e){return __awaiter(this,void 0,void 0,(function*(){return this.Text(yield t.Text(),e)}))}Data_Version(t,e){return __awaiter(this,void 0,void 0,(function*(){const n=new Map;yield t.Cache_Files();for(let r=0,i=t.File_Count();r<i;r+=1){const i=yield this.Data_File(t.File_At(r),e);if(i instanceof Parser.Help)return i;i.length>0&&n.set(t.File_At(r),i)}return n}))}Data_Versions(t,e){return __awaiter(this,void 0,void 0,(function*(){const n=new Map;for(const r of t){const t=yield this.Data_Version(r,e);if(t instanceof Parser.Help)return t;t.size>0&&n.set(r,t)}return n}))}}const SINGLETON=new Instance;export function Singleton(){return SINGLETON}