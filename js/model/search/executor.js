import*as Utils from"../../utils.js";import{Boundary}from"./boundary.js";import*as Parser from"./parser.js";import*as Compiler from"./compiler.js";import*as Node from"./node.js";import*as Result from"./result.js";export var Mode;!function(t){t[t.INITIAL=0]="INITIAL",t[t.SEQUENCE=1]="SEQUENCE",t[t.NOT=2]="NOT",t[t.CASE=4]="CASE",t[t.ALIGN=8]="ALIGN",t[t.META=16]="META"}(Mode||(Mode={}));export class Instance{constructor(){this.parser=new Parser.Instance,this.compiler=new Compiler.Instance}Execute(t,e){const n=this.parser.Parse(t,e.Dictionary());if(n instanceof Parser.Help)return n;{const t=this.compiler.Compile(n),r=[];for(let n=0,_=e.Line_Count();n<_;n+=1){const _=e.Line(n),i=this.Step(t,Mode.INITIAL,new Result.Instance(_));null!=i&&r.push(i)}return r}}Step(t,e,n){const r=t.Type();if(r===Node.Type.SEQUENCE){const r=t,_=this.Step(r.Operand(),e|Mode.SEQUENCE,new Result.Instance(n.Line()));return null!=_?this.Step(r.Next(),e,n.Combine(_)):null}if(r===Node.Type.NOT){const r=t,_=this.Step(r.Operand(),e^Mode.NOT,n);return null!=_?this.Step(r.Next(),e,_):null}if(r===Node.Type.CASE){const r=t,_=this.Step(r.Operand(),e^Mode.CASE,n);return null!=_?this.Step(r.Next(),e,_):null}if(r===Node.Type.ALIGN){const r=t,_=this.Step(r.Operand(),e^Mode.ALIGN,n);return null!=_?this.Step(r.Next(),e,_):null}if(r===Node.Type.META){const r=t,_=this.Step(r.Operand(),e^Mode.META,n);return null!=_?this.Step(r.Next(),e,_):null}if(r===Node.Type.XOR){const r=t,_=this.Step(r.Left_Operand(),e,n.Copy()),i=this.Step(r.Right_Operand(),e,n.Copy());return null!=_?null!=i?null:_:null!=i?i:null}if(r===Node.Type.OR){const r=t,_=this.Step(r.Left_Operand(),e,n.Copy()),i=this.Step(r.Right_Operand(),e,n.Copy());return null!=_?null!=i?_.Combine(i):_:null!=i?i:null}if(r===Node.Type.TEXT){Utils.Assert(0!=(e&Mode.SEQUENCE),"Every text node should be in a sequence.");const r=t,_=this.Text(r,e,n);return null!=_?this.Step(r.Next(),e,_):null}return r===Node.Type.END?n:(Utils.Assert(!1,`Unknown node_type: ${r}`),null)}Text(t,e,n){const r=n.Line(),_=t.Part(),i=t.Boundary(),a=e&Mode.CASE?_.Value():_.Value().toLowerCase();if(i===Boundary.START){for(let t=0,_=r.Macro_Part_Count();t<_;t+=1)if(e&Mode.META||!r.Macro_Part(t).Is_Command()){const _=r.Macro_Part(t),i=e&Mode.CASE?_.Value():_.Value().toLowerCase();if(e&Mode.ALIGN)e&Mode.NOT?i!==a&&n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:0,last_part_end_unit_index:i.length})):i===a&&n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:0,last_part_end_unit_index:i.length}));else if(0!=(e&Mode.NOT)&&(i.length<a.length||i.slice(i.length-a.length,i.length)!==a))n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:0,last_part_end_unit_index:i.length}));else if(i.length>=a.length&&i.slice(i.length-a.length,i.length)===a){let e=i.length-a.length;for(let t=e,n=0;t>n+(a.length-1)&&i.slice(t-a.length,t)===a;)t-=a.length,e=t;n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:e,last_part_end_unit_index:i.length}))}}return n.Match_Count()>0?n:null}if(i===Boundary.MIDDLE){const t=new Result.Instance(n.Line());for(let _=0,i=n.Match_Count();_<i;_+=1){const i=n.Match(_);let s=i.End_Part_Index();const d=r.Macro_Part_Count();let l=0;if(!(e&Mode.META))for(;s+l<d&&r.Macro_Part(s+l).Is_Command();)l+=1;if(s+l<d){const n=r.Macro_Part(s+l),_=e&Mode.CASE?n.Value():n.Value().toLowerCase();e&Mode.NOT?_!==a&&t.Try_Add_Match(new Result.Match({first_part_index:i.First_Part_Index(),end_part_index:s+l+1,first_part_first_unit_index:i.First_Part_First_Unit_Index(),last_part_end_unit_index:_.length})):_===a&&t.Try_Add_Match(new Result.Match({first_part_index:i.First_Part_Index(),end_part_index:s+l+1,first_part_first_unit_index:i.First_Part_First_Unit_Index(),last_part_end_unit_index:_.length}))}}return t.Match_Count()>0?t:null}if(i===Boundary.END){const t=new Result.Instance(n.Line());for(let _=0,i=n.Match_Count();_<i;_+=1){const i=n.Match(_);let s=i.End_Part_Index();const d=r.Macro_Part_Count();let l=0;if(!(e&Mode.META))for(;s+l<d&&r.Macro_Part(s+l).Is_Command();)l+=1;if(s+l<d){const n=r.Macro_Part(s+l),_=e&Mode.CASE?n.Value():n.Value().toLowerCase();if(e&Mode.ALIGN)e&Mode.NOT?_!==a&&t.Try_Add_Match(new Result.Match({first_part_index:i.First_Part_Index(),end_part_index:s+l+1,first_part_first_unit_index:i.First_Part_First_Unit_Index(),last_part_end_unit_index:_.length})):_===a&&t.Try_Add_Match(new Result.Match({first_part_index:i.First_Part_Index(),end_part_index:s+l+1,first_part_first_unit_index:i.First_Part_First_Unit_Index(),last_part_end_unit_index:_.length}));else if(0!=(e&Mode.NOT)&&(_.length<a.length||_.slice(0,a.length)!==a))t.Try_Add_Match(new Result.Match({first_part_index:i.First_Part_Index(),end_part_index:s+l+1,first_part_first_unit_index:i.First_Part_First_Unit_Index(),last_part_end_unit_index:_.length}));else if(_.length>=a.length&&_.slice(0,a.length)===a){let e=a.length;for(let t=e,n=_.length;t<n-(a.length-1)&&_.slice(t,t+a.length)===a;)t+=a.length,e=t;t.Try_Add_Match(new Result.Match({first_part_index:i.First_Part_Index(),end_part_index:s+l+1,first_part_first_unit_index:i.First_Part_First_Unit_Index(),last_part_end_unit_index:e}))}}}return t.Match_Count()>0?t:null}if(i===Boundary.ANY){for(let t=0,_=r.Macro_Part_Count();t<_;t+=1)if(e&Mode.META||!r.Macro_Part(t).Is_Command()){const _=r.Macro_Part(t),i=e&Mode.CASE?_.Value():_.Value().toLowerCase();if(e&Mode.ALIGN)e&Mode.NOT?i!==a&&n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:0,last_part_end_unit_index:i.length})):i===a&&n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:0,last_part_end_unit_index:i.length}));else{let r=!1,_=0,s=0;for(let t=0,e=i.length;t<e-(a.length-1);)if(r){if(i.slice(t,t+a.length)!==a)break;t+=a.length,s=t}else i.slice(t,t+a.length)===a?(r=!0,_=t,t+=a.length,s=t):t+=1;0==(e&Mode.NOT)||r?r&&n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:_,last_part_end_unit_index:s})):n.Try_Add_Match(new Result.Match({first_part_index:t,end_part_index:t+1,first_part_first_unit_index:0,last_part_end_unit_index:i.length}))}}return n.Match_Count()>0?n:null}return Utils.Assert(!1,"Unknown text boundary."),null}}