import*as Utils from"../../utils.js";export class Match{constructor({first_part_index:t,end_part_index:i,first_part_first_unit_index:_,last_part_end_unit_index:s}){Utils.Assert(t>-1,"first_part_index must be greater than -1."),Utils.Assert(t<i,"first_part_index must be less than end_part_index."),Utils.Assert(_>-1,"first_part_first_unit_index must be greater than -1."),Utils.Assert(s>-1,"last_part_end_unit_index must be greater than -1."),this.first_part_index=t,this.end_part_index=i,this.first_part_first_unit_index=_,this.last_part_end_unit_index=s}Copy(){return new Match({first_part_index:this.first_part_index,end_part_index:this.end_part_index,first_part_first_unit_index:this.first_part_first_unit_index,last_part_end_unit_index:this.last_part_end_unit_index})}First_Part_Index(){return this.first_part_index}End_Part_Index(){return this.end_part_index}First_Part_First_Unit_Index(){return this.first_part_first_unit_index}Last_Part_End_Unit_Index(){return this.last_part_end_unit_index}Is_Equal_To(t){return t.first_part_index===this.first_part_index&&t.end_part_index===this.end_part_index&&t.first_part_first_unit_index===this.first_part_first_unit_index&&t.last_part_end_unit_index===this.last_part_end_unit_index}Includes(t){return t.first_part_index>=this.first_part_index&&t.end_part_index<=this.end_part_index&&t.first_part_first_unit_index>=this.first_part_first_unit_index&&t.last_part_end_unit_index<=this.last_part_end_unit_index}Shadows(t){return t.first_part_index>=this.first_part_index&&t.end_part_index<this.end_part_index||t.first_part_index>this.first_part_index&&t.end_part_index<=this.end_part_index||t.first_part_index===this.first_part_index&&t.end_part_index===this.end_part_index&&(t.first_part_first_unit_index>=this.first_part_first_unit_index&&t.last_part_end_unit_index<this.last_part_end_unit_index||t.first_part_first_unit_index>this.first_part_first_unit_index&&t.last_part_end_unit_index<=this.last_part_end_unit_index)}}export class Instance{constructor(t){this.line=t,this.matches=[],this.buffer=[]}Copy(){const t=new Instance(this.line);for(const i of this.matches)t.matches.push(i.Copy());return t}Combine(t){for(let i=0,_=t.Match_Count();i<_;i+=1)this.Try_Add_Match(t.Match(i));return t.matches=[],this}Line(){return this.line}Has_Match_Equal_To(t){for(const i of this.matches)if(i.Is_Equal_To(t))return!0;return!1}Has_Match_Including(t){for(const i of this.matches)if(i.Includes(t))return!0;return!1}Has_Match_Shadowing(t){for(const i of this.matches)if(i.Shadows(t))return!0;return!1}Match_Count(){return this.matches.length}Match(t){return Utils.Assert(t>-1,"match_index must be greater than -1."),Utils.Assert(t<this.Match_Count(),"match_index must be less than match_count."),this.matches[t]}Try_Add_Match(t){let i=!0;for(const _ of this.matches)_.Includes(t)?(i=!1,this.buffer.push(_)):t.Shadows(_)||this.buffer.push(_);const _=this.buffer;this.buffer=this.matches,this.matches=_,this.buffer.splice(0,this.buffer.length),i&&this.matches.push(t)}}