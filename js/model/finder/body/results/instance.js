import*as Utils from"../../../../utils.js";import*as Entity from"../../../entity.js";import*as Filter from"../../../selector.js";import*as Tree from"./tree.js";import*as Buffer from"../../../buffer/search.js";export class Instance extends Entity.Instance{constructor({body:t,filter_slot_order:s,versions_results:e,is_showing_commands:n}){super();const o=new Set,i=new Set,r=new Set;this.file_count=0,this.line_count=0,this.match_count=0;const a={},_=function(t,s,e,n){null==a[t]&&(a[t]={}),null==a[t][s]&&(a[t][s]={}),Utils.Assert(null==a[t][s][e],"Can't clobber files!"),a[t][s][e]=[];for(const o of n){this.file_count+=1,this.line_count+=o[1].length;for(const t of o[1])this.match_count+=t.Match_Count();a[t][s][e].push({name:o[0].Name(),results:o[1]})}}.bind(this);if(s===Filter.Slot.Order.BOOKS_LANGUAGES_VERSIONS)for(const t of e){const s=t[0].Language().Book().Name(),e=t[0].Language().Name(),n=t[0].Name();o.add(s),i.add(e),r.add(n),_(s,e,n,t[1])}else if(s===Filter.Slot.Order.BOOKS_VERSIONS_LANGUAGES)for(const t of e){const s=t[0].Language().Book().Name(),e=t[0].Language().Name(),n=t[0].Name();o.add(s),i.add(e),r.add(n),_(s,n,e,t[1])}else if(s===Filter.Slot.Order.LANGUAGES_BOOKS_VERSIONS)for(const t of e){const s=t[0].Language().Book().Name(),e=t[0].Language().Name(),n=t[0].Name();o.add(s),i.add(e),r.add(n),_(e,s,n,t[1])}else if(s===Filter.Slot.Order.LANGUAGES_VERSIONS_BOOKS)for(const t of e){const s=t[0].Language().Book().Name(),e=t[0].Language().Name(),n=t[0].Name();o.add(s),i.add(e),r.add(n),_(e,n,s,t[1])}else if(s===Filter.Slot.Order.VERSIONS_BOOKS_LANGUAGES)for(const t of e){const s=t[0].Language().Book().Name(),e=t[0].Language().Name(),n=t[0].Name();o.add(s),i.add(e),r.add(n),_(n,s,e,t[1])}else if(s===Filter.Slot.Order.VERSIONS_LANGUAGES_BOOKS)for(const t of e){const s=t[0].Language().Book().Name(),e=t[0].Language().Name(),n=t[0].Name();o.add(s),i.add(e),r.add(n),_(n,e,s,t[1])}else Utils.Assert(!1,"Unknown filter_slot_order.");this.book_count=o.size,this.language_count=i.size,this.version_count=r.size;{const t=1===this.match_count?"1 match":`${this.match_count} matches`,e=1===this.line_count?"1 line":`${this.line_count} lines`,n=1===this.file_count?"1 file":`${this.file_count} files`,o=1===this.version_count?"1 version":`${this.version_count} versions`,i=1===this.language_count?"1 language":`${this.language_count} languages`,r=1===this.book_count?"1 book":`${this.book_count} books`;s===Filter.Slot.Order.BOOKS_LANGUAGES_VERSIONS?this.counts_as_string=`${t} in ${e}, ${n}, ${o}, ${i}, and ${r}`:s===Filter.Slot.Order.BOOKS_VERSIONS_LANGUAGES?this.counts_as_string=`${t} in ${e}, ${n}, ${i}, ${o}, and ${r}`:s===Filter.Slot.Order.LANGUAGES_BOOKS_VERSIONS?this.counts_as_string=`${t} in ${e}, ${n}, ${o}, ${r}, and ${i}`:s===Filter.Slot.Order.LANGUAGES_VERSIONS_BOOKS?this.counts_as_string=`${t} in ${e}, ${n}, ${r}, ${o}, and ${i}`:s===Filter.Slot.Order.VERSIONS_BOOKS_LANGUAGES?this.counts_as_string=`${t} in ${e}, ${n}, ${i}, ${r}, and ${o}`:s===Filter.Slot.Order.VERSIONS_LANGUAGES_BOOKS?this.counts_as_string=`${t} in ${e}, ${n}, ${r}, ${i}, and ${o}`:(Utils.Assert(!1,"Unknown filter_slot_order."),this.counts_as_string="")}this.body=t,this.tree=new Tree.Instance({results:this,data:a}),this.is_showing_commands=n,this.buffer=new Buffer.Instance({results:[],is_showing_commands:this.is_showing_commands}),this.Add_Dependencies([this.tree,this.buffer])}Body(){return this.body}Tree(){return this.tree}Buffer(){return this.buffer}Set_Buffer(t){this.buffer=new Buffer.Instance({results:t,is_showing_commands:this.is_showing_commands})}Book_Count(){return this.book_count}Language_Count(){return this.language_count}Version_Count(){return this.version_count}File_Count(){return this.file_count}Line_Count(){return this.line_count}Match_Count(){return this.match_count}Counts_As_String(){return this.counts_as_string}}