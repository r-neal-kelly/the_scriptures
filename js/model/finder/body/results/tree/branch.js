import*as Utils from"../../../../../utils.js";import*as Tree from"./instance.js";import*as Leaf from"./leaf.js";export class Instance{constructor({parent:e,name:s,data:t}){if(this.parent=e,this.name=s,this.branches_or_leaves=[],Utils.Is.Object(t)){this.has_branches=!0;for(const[e,s]of Object.entries(t))this.branches_or_leaves.push(new Instance({parent:this,name:e,data:s}))}else{this.has_branches=!1;for(const e of t)this.branches_or_leaves.push(new Leaf.Instance({parent:this,data:e}))}}Tree(){let e=this.Parent();for(;!(e instanceof Tree.Instance);)e=e.Parent();return e}Parent(){return this.parent}Name(){return this.name}Is_Empty(){return 0===this.branches_or_leaves.length}Has_Branches(){return this.has_branches}Branch_Count(){return 0,this.branches_or_leaves.length}Branch_At(e){return 0,0,this.branches_or_leaves[e]}Has_Leaves(){return!this.Has_Branches()}Leaf_Count(){return 0,this.branches_or_leaves.length}Leaf_At(e){return 0,0,this.branches_or_leaves[e]}Is_Selected(){return this.Tree().Is_Selected(this)}}