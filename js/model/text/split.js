import*as Utils from"../../utils.js";import*as Item from"./item.js";export function From(e){const t=[],n=e.Value().match(/\S+|\s/g);if(null!=n){let i=0;for(let r=0,s=n.length;r<s;r+=1)t.push(new Instance({break_:e,index:r,first_unit_index:i,end_unit_index:i+=n[r].length}))}return t}export class Instance{constructor({break_:e,index:t,first_unit_index:n,end_unit_index:i}){Utils.Assert(t>-1,"index must be greater than -1."),Utils.Assert(n>-1,"first_unit_index must be greater than -1."),Utils.Assert(i>n,"end_unit_index must be greater than first_unit_index."),Utils.Assert(i<=e.Value().length,"end_unit_index must be less than or equal to break_value_length."),this.break_=e,this.index=t,this.first_unit_index=n,this.end_unit_index=i,this.value=e.Value().slice(n,i)}Item_Type(){return Item.Type.SPLIT}Is_Part(){return!1}Is_Split(){return!0}Break(){return this.break_}Index(){return this.index}Part_Index(){return this.Break().Index()}First_Unit_Index(){return this.first_unit_index}End_Unit_Index(){return this.end_unit_index}Has_Meta_Value(){return this.Break().Has_Meta_Value()}Value(){return this.value}}