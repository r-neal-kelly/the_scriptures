import*as Utils from"../../utils.js";import*as Unicode from"../../unicode.js";import*as Dictionary from"./dictionary.js";import*as Part from"./part.js";import*as Split from"./split.js";import*as Segment from"./segment.js";export class Instance{constructor({text:t,index:e,value:s}){this.text=t,this.index=e,this.value="",this.micro_parts=[],this.macro_parts=[],this.micro_segments=[],this.macro_segments=[],this.is_centered=!1,this.is_indented=!1,this.Set_Value(s)}Text(){return this.text}Index(){return this.index}Value(){return this.value}Set_Value(t){let e;Utils.Assert(!/\r?\n/.test(t),"A line cannot have any line-breaks."),this.value=t,this.micro_parts=[],this.macro_parts=[],this.micro_segments=[],this.macro_segments=[],this.is_centered=this.value.slice(0,Part.Command.Known_Value.CENTER.length)===Part.Command.Known_Value.CENTER,this.is_indented=this.value.slice(0,Part.Command.Known_Value.INDENT.length)===Part.Command.Known_Value.INDENT,function(t){t[t.WORD=0]="WORD",t[t.BREAK=1]="BREAK",t[t.POINT=2]="POINT"}(e||(e={}));const s=this.Text().Dictionary();let r=Part.Style._NONE_,n=e.POINT,a=new Unicode.Iterator({text:this.value}),i=null;const o=Part.Command.Last_Non_Value_Index(this.value);let _=new Segment.Instance({segment_type:Segment.Type.MICRO}),m=new Segment.Instance({segment_type:Segment.Type.MACRO});const l=function(t){_.Try_Add_Item(t)||(this.micro_segments.push(_),_=new Segment.Instance({segment_type:Segment.Type.MICRO}),_.Add_Item(t))}.bind(this),c=function(t){m.Try_Add_Item(t)||(this.macro_segments.push(m),m=new Segment.Instance({segment_type:Segment.Type.MACRO}),m.Add_Item(t))}.bind(this);for(let t=a;!t.Is_At_End();){const _=Part.Command.Maybe_Valid_Value_From(t.Points());if(null!=_){const e=new Part.Command.Instance({value:_});e.Is_Open_Italic()?r|=Part.Style.ITALIC:e.Is_Close_Italic()?r&=~Part.Style.ITALIC:e.Is_Open_Bold()?r|=Part.Style.BOLD:e.Is_Close_Bold()?r&=~Part.Style.BOLD:e.Is_Open_Underline()?r|=Part.Style.UNDERLINE:e.Is_Close_Underline()?r&=~Part.Style.UNDERLINE:e.Is_Open_Small_Caps()?r|=Part.Style.SMALL_CAPS:e.Is_Close_Small_Caps()?r&=~Part.Style.SMALL_CAPS:e.Is_Open_Error()?r|=Part.Style.ERROR:e.Is_Close_Error()&&(r&=~Part.Style.ERROR),this.micro_parts.push(e),this.macro_parts.push(e),l(e),c(e),t=new Unicode.Iterator({text:t.Text(),index:t.Index()+_.length}),a=t}else{const _=t.Point(),m=t.Look_Forward_Point(),u=Part.Command.Maybe_Valid_Value_From(t.Look_Forward_Points()||"");if(s.Has_Letter(_)){const t=new Part.Letter.Instance({value:_,style:r});this.micro_parts.push(t),l(t),n=e.WORD}else if(s.Has_Marker(_)){const t=new Part.Marker.Instance({value:_,style:r});this.micro_parts.push(t),l(t),n=e.BREAK}else{const s=new Part.Point.Instance({value:_,style:r});this.micro_parts.push(s),l(s),n=e.POINT,null==i&&(i=t.Index()),this.macro_parts.push(s),c(s),a=t.Next()}if(n===e.WORD){if(null==m||null!=u||!s.Has_Letter(m)){null==i&&(i=t.Index());const e=t.Text().slice(a.Index(),t.Look_Forward_Index()),n=s.Has_Word(e)?Part.Status.GOOD:s.Has_Word_Error(e)?Part.Status.ERROR:Part.Status.UNKNOWN,o=new Part.Word.Instance({value:e,status:n,style:r});this.macro_parts.push(o),c(o),a=t.Next()}}else if(n===e.BREAK&&(null==m||null!=u||!s.Has_Marker(m))){null==i&&(i=t.Index());const e=t.Text().slice(a.Index(),t.Look_Forward_Index()),n=t.Index()===i?Dictionary.Boundary.START:t.Index()===o?Dictionary.Boundary.END:Dictionary.Boundary.MIDDLE,_=s.Has_Break(e,n)?Part.Status.GOOD:s.Has_Break_Error(e,n)?Part.Status.ERROR:Part.Status.UNKNOWN,m=new Part.Break.Instance({value:e,status:_,style:r});this.macro_parts.push(m);const l=Split.From(m);for(const t of l)c(t);a=t.Next()}t=t.Next()}}_.Item_Count()>0&&this.micro_segments.push(_),m.Item_Count()>0&&this.macro_segments.push(m)}Micro_Part_Count(){return this.micro_parts.length}Micro_Part(t){return Utils.Assert(t>-1,"micro_part_index must be greater than -1."),Utils.Assert(t<this.Micro_Part_Count(),"micro_part_index must be less than micro_part_count."),this.micro_parts[t]}Macro_Part_Count(){return this.macro_parts.length}Macro_Part(t){return Utils.Assert(t>-1,"macro_part_index must be greater than -1."),Utils.Assert(t<this.Macro_Part_Count(),"macro_part_index must be less than macro_part_count."),this.macro_parts[t]}Micro_Segment_Count(){return this.micro_segments.length}Micro_Segment(t){return Utils.Assert(t>-1,"micro_segment_index must be greater than -1."),Utils.Assert(t<this.Micro_Segment_Count(),"micro_segment_index must be less than micro_segment_count."),this.micro_segments[t]}Macro_Segment_Count(){return this.macro_segments.length}Macro_Segment(t){return Utils.Assert(t>-1,"macro_segment_index must be greater than -1."),Utils.Assert(t<this.Macro_Segment_Count(),"macro_segment_index must be less than macro_segment_count."),this.macro_segments[t]}Is_Centered(){return this.is_centered}Is_Indented(){return this.is_indented}}