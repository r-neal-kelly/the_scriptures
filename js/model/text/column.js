import*as Utils from"../../utils.js";import*as Row from"./row.js";export class Instance{constructor({index:s,is_margin:t}){this.index=s,this.is_margin=t,this.rows=[],this.last_command=null}Update_Empty(){0,0,this.Push_Row("")}Update_Point(s,t,i){0,this.rows.length<1&&this.Push_Row(s),this.Working_Row().Update_Point(t,i)}Update_Letter(s,t){0,this.rows.length<1&&this.Push_Row(s),this.Working_Row().Update_Letter(t)}Update_Marker(s,t){0,this.rows.length<1&&this.Push_Row(s),this.Working_Row().Update_Marker(t)}Update_Word(s,t){0,this.rows.length<1&&this.Push_Row(s),this.Working_Row().Update_Word(t)}Update_Break(s,t){0,this.rows.length<1&&this.Push_Row(s),this.Working_Row().Update_Break(t)}Update_Command(s,t,i){0,(this.rows.length<1||i.Is_Row()&&(!this.last_command||!this.last_command.Is_Column()&&!this.last_command.Is_Margin()))&&this.Push_Row(s),this.Working_Row().Update_Command(t,i),this.last_command=i}Push_Row(s){this.rows.push(new Row.Instance({index:this.rows.length,value:s}))}Working_Row(){return this.rows[this.rows.length-1]}Is_Finalized(){return Object.isFrozen(this.rows)}Finalize(){0,Object.freeze(this.rows);for(const s of this.rows)s.Finalize();this.last_command=null}Index(){return 0,this.index}Is_Margin(){return this.is_margin}Has_Row_Index(s){return 0,0,s<this.Row_Count()}Row_Count(){return 0,this.rows.length}Row(s){return 0,0,this.rows[s]}}