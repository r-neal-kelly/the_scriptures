import*as Utils from"../../utils.js";import*as Row from"./row.js";export class Instance{constructor({index:s}){this.index=s,this.rows=[]}Update_Empty(){0,0,this.Push_Row("")}Update_Point(s,t,e){0,this.rows.length<1&&this.Push_Row(s),this.rows[this.rows.length-1].Update_Point(t,e)}Update_Letter(s,t){0,this.rows.length<1&&this.Push_Row(s),this.rows[this.rows.length-1].Update_Letter(t)}Update_Marker(s,t){0,this.rows.length<1&&this.Push_Row(s),this.rows[this.rows.length-1].Update_Marker(t)}Update_Word(s,t){0,this.rows.length<1&&this.Push_Row(s),this.rows[this.rows.length-1].Update_Word(t)}Update_Break(s,t){0,this.rows.length<1&&this.Push_Row(s),this.rows[this.rows.length-1].Update_Break(t)}Update_Command(s,t,e){0,(this.rows.length<1||e.Is_Row())&&this.Push_Row(s),this.rows[this.rows.length-1].Update_Command(t,e)}Push_Row(s){this.rows.push(new Row.Instance({index:this.rows.length,value:s}))}Is_Finalized(){return Object.isFrozen(this.rows)}Finalize(){0,Object.freeze(this.rows);for(const s of this.rows)s.Finalize()}Index(){return 0,this.index}Has_Row_Index(s){return 0,0,s<this.Row_Count()}Row_Count(){return 0,this.rows.length}Row(s){return 0,0,this.rows[s]}}