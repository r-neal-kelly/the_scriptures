import*as Utils from"../../utils.js";import*as Dictionary from"./dictionary.js";import*as Line from"./line.js";import*as Path from"./path.js";export class Instance{constructor({dictionary:e,value:t,path_type:n=Path.Type.DEFAULT}={dictionary:new Dictionary.Instance,value:""}){this.dictionary=e,this.value=t,this.lines=[],this.path_type=n,this.has_evaluated_tables=!1,this.table_caches=[],this.working_table_cache=null;const s=t.split(/\r?\n/g);for(let e=0,t=s.length;e<t;e+=1)this.lines.push(new Line.Instance({text:this,index:e,value:s[e]}))}Dictionary(){return this.dictionary}Value(){return this.value}Line_Count(){return this.lines.length}Lines(){return Array.from(this.lines)}Has_Line(e){return this.lines.indexOf(e)>-1}Has_Line_Index(e){return e>-1&&e<this.Line_Count()}Line(e){return 0,this.lines[e]}Line_Column_Percents(e){this.has_evaluated_tables||this.Evaluate_Tables();for(let t=0,n=this.table_caches.length;t<n;t+=1){const n=this.table_caches[t];if(e>=n.first_line_index&&e<=n.last_line_index)return n.column_percents}return 0,[]}Path_Type(){return this.path_type}Set_Path_Type(e){this.path_type=e}Default_Language_Name(){return this.Dictionary().Default_Language_Name()}Evaluate_Tables(){function e(e){0;const t=this.working_table_cache,n={first_line_index:t.first_line_index,last_line_index:e,column_percents:[]};let s=0;for(let e=0,n=t.max_column_lengths.length;e<n;e+=1)s+=t.max_column_lengths[e];for(let e=0,i=t.max_column_lengths.length;e<i;e+=1)n.column_percents.push(100*t.max_column_lengths[e]/s);Object.freeze(n.column_percents),Object.freeze(n),this.table_caches.push(n),this.working_table_cache=null}this.has_evaluated_tables=!1,this.table_caches=[],this.working_table_cache=null;for(let t=0,n=this.Line_Count();t<n;t+=1){const n=this.Line(t);if(n.Is_First_Row_Of_Table()){0,this.working_table_cache={first_line_index:t,max_column_lengths:[]};for(let e=0,t=n.Column_Count();e<t;e+=1){n.Column(e);this.working_table_cache.max_column_lengths.push(0)}}if(n.Is_Row_Of_Table()){0;const s=this.working_table_cache;for(let e=0,t=n.Column_Count();e<t;e+=1){const t=n.Column(e);for(let n=0,i=t.Row_Count();n<i;n+=1){const i=t.Row(n).Value();s.max_column_lengths[e]<i.length&&(s.max_column_lengths[e]=i.length)}}n.Text().Line_Count()-1===t&&e.bind(this)(t)}else null!=this.working_table_cache&&e.bind(this)(t)}this.has_evaluated_tables=!0}}