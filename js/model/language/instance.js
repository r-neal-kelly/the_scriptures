import*as Utils from"../../utils.js";export class Instance{constructor({name:t,direction:n,default_font_name:e,current_font_name:o=e,font_adaptors:r}){this.name=t,this.direction=n,this.font_names=[],this.default_font_name=e,this.current_font_name=o,this.font_adaptors={};for(const t of r){const n=t.Font().Name();this.font_names.push(n),Utils.Assert(!this.font_adaptors.hasOwnProperty(n),"can only have one adaptor per font_name"),this.font_adaptors[n]=t}Object.freeze(this.font_names),Object.isFrozen(this.font_adaptors)||Object.freeze(this.font_adaptors),Utils.Assert(this.Has_Font_Adaptor(this.Default_Font_Name()),`missing font_adaptor for default_font_name: ${e}`),Utils.Assert(this.Has_Font_Adaptor(this.Current_Font_Name()),`missing font_adaptor for current_font_name: ${o}`)}Name(){return this.name}Direction(){return this.direction}Font_Names(){return Array.from(this.font_names)}Default_Font_Name(){return this.default_font_name}Default_Font_Styles(){return this.Some_Font_Adaptor(this.Default_Font_Name()).Styles()}Current_Font_Name(){return this.current_font_name}Set_Current_Font_Name(t){Utils.Assert(this.Has_Font_Adaptor(t),`missing font_adaptor for font_name: ${t}`),this.current_font_name=t}Current_Font_Styles(){return this.Some_Font_Adaptor(this.Current_Font_Name()).Styles()}Has_Font_Adaptor(t){return this.font_adaptors.hasOwnProperty(t)}Some_Font_Adaptor(t){return Utils.Assert(this.Has_Font_Adaptor(t),`missing font_adaptor for font_name: ${t}`),this.font_adaptors[t]}Adapt_Text_To_Font({text:t,font_name:n=this.Current_Font_Name()}){return this.Some_Font_Adaptor(n).Treat_Text(t)}Adapt_Text_To_Default_Font(t){return this.Adapt_Text_To_Font({text:t,font_name:this.Default_Font_Name()})}Adapt_Text_To_Current_Font(t){return this.Adapt_Text_To_Font({text:t,font_name:this.Current_Font_Name()})}}