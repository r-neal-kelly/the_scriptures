import*as Utils from"../../utils.js";import*as Languages from"../languages.js";import*as Slot from"./slot.js";export class Instance{static Max_Slot_Count(){return Instance.MAX_SLOT_COUNT}constructor(){this.cached_font_slots={},this.slots=[];const t=Languages.Singleton(),s=t.Language_Names();for(const e of s)this.cached_font_slots[e]=new Slot.Instance({selector:this,index:1,type:Slot.Type.FONTS,item_names:t.Global_Short_Font_Names(e),selected_item_name:t.Current_Global_Short_Font_Name(e)});this.Push_Slot()}Slot_Count(){return this.slots.length}Has_Slot(t){return this.slots.includes(t)}Has_Slot_Type(t){for(const s of this.slots)if(s.Type()===t)return!0;return!1}Slot_From_Type(t){for(const s of this.slots)if(s.Type()===t)return s;return 0,this.slots[0]}Has_Slot_At_Index(t){return 0,t<this.Slot_Count()}Slot_At_Index(t){return 0,0,this.slots[t]}Slots(){return Array.from(this.slots)}Slot_Types(){return[Slot.Type.LANGUAGES,Slot.Type.FONTS]}Push_Slot(){const t=this.Slot_Count();0;const s=t,e=this.Slot_Types()[s];e===Slot.Type.LANGUAGES?this.slots.push(new Slot.Instance({selector:this,index:s,type:e,item_names:Languages.Singleton().Language_Names()})):e===Slot.Type.FONTS?this.slots.push(this.Fonts(this.Slot_At_Index(0).Selected_Item().Name())):0}Pop_Slot(){this.slots.pop()}Fonts(t){return 0,this.cached_font_slots[t]}Some_Selected_Font_Name(t){return Languages.Singleton().Short_Font_Name_To_Font_Name(t,this.Fonts(t).Selected_Item().Name())}__Select_Item__({slot:t,slot_item:s}){if(0,t.__Select_Item__({item:s}),t.Type()!==Slot.Type.FONTS)if(this.Slot_At_Index(this.Slot_Count()-1)===t)this.Push_Slot();else{for(;this.Slot_Count()>t.Index()+1;)this.Pop_Slot();this.Push_Slot()}}}Instance.MAX_SLOT_COUNT=2;