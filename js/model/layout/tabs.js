import*as Utils from"../../utils.js";import*as Entity from"../entity.js";import*as Tab from"./tab.js";export class Instance extends Entity.Instance{constructor({bar:s}){super(),this.bar=s,this.window_ids=[],this.tabs=[],this.Add_Dependencies(this.tabs)}Bar(){return this.bar}Count(){return this.tabs.length}Has(s){return this.tabs.indexOf(s)>-1}Has_At(s){return s>-1&&s<this.tabs.length}At(s){return Utils.Assert(s>-1,"index must be greater than -1."),Utils.Assert(s<this.Count(),"index must be less than count."),this.tabs[s]}Tabs(){return Array.from(this.tabs)}Has_Window(s){return this.window_ids.indexOf(s.ID())>-1}Add_Window(s){Utils.Assert(!this.Has_Window(s),`Already has window with id of ${s.ID()}.`),this.window_ids.push(s.ID()),this.tabs.push(new Tab.Instance({tabs:this,window:s}))}Remove_Window(s){const t=this.window_ids.indexOf(s.ID());Utils.Assert(t>-1,`Does not have window with id of ${s.ID()}.`),this.window_ids.splice(t,1),this.tabs.splice(t,1)}Windows(){const s=[];for(const t of this.tabs)s.push(t.Window());return s}}