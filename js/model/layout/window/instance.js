var __awaiter=this&&this.__awaiter||function(t,i,s,e){return new(s||(s=Promise))((function(a,l){function n(t){try{r(e.next(t))}catch(t){l(t)}}function o(t){try{r(e.throw(t))}catch(t){l(t)}}function r(t){var i;t.done?a(t.value):(i=t.value,i instanceof s?i:new s((function(t){t(i)}))).then(n,o)}r((e=e.apply(t,i||[])).next())}))};import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import{State}from"./state.js";import*as Bar from"./bar.js";export class Instance extends Entity.Instance{constructor({wall:t,program:i}){super(),this.wall=t,this.state=State._NONE_,this.program=i,this.bar=new Bar.Instance({window:this}),this.Add_Dependencies([this.program,this.bar])}Is_In_Wall(){return 0,null!=this.wall}Wall(){return 0,0,this.wall}Add_To_Wall(t){0,0,t.Add(this),this.wall=t}Remove_From_Wall(){0,0,this.Wall().Remove(this.ID()),this.wall=null}Move_To_Wall(t){0,this.Is_In_Wall()&&this.Remove_From_Wall(),null!=t&&this.Add_To_Wall(t)}State(){return this.state}Program(){return 0,0,this.program}Bar(){return this.bar}Is_Alive(){return 0!=(this.state&State.IS_ALIVE)}Live(){if(0,this.state|=State.IS_ALIVE,null!=this.wall){const t=this.wall;this.wall=null,this.Add_To_Wall(t)}}Kill(){0,this.Move_To_Wall(null),this.state&=~State.IS_ALIVE}Is_Minimized(){return 0,0!=(this.state&State.IS_MINIMIZED)}Minimize(){0,this.state|=State.IS_MINIMIZED}Unminimize(){0,this.state&=~State.IS_MINIMIZED}Toggle_Minimization(){0,this.state^=State.IS_MINIMIZED}Is_Maximized(){return 0,0!=(this.state&State.IS_MAXIMIZED)}Maximize(){0,this.state|=State.IS_MAXIMIZED}Unmaximize(){0,this.state&=~State.IS_MAXIMIZED}Toggle_Maximization(){0,this.state^=State.IS_MAXIMIZED}Is_Active(){return this.Wall().Layout().Maybe_Active_Window()===this}Before_Dependencies_Are_Ready(){return __awaiter(this,void 0,void 0,(function*(){this.Live()}))}}