import*as Utils from"../utils.js";import{Key}from"./key.js";export class Instance{constructor(){this.buffer=[]}Maybe_Index_Of(t){const e=this.buffer.indexOf(t);return e>=0?e:null}Has(t){return null!=this.Maybe_Index_Of(t)}Has_Sequence(t){0;const e=this.Maybe_Index_Of(t[0]);if(null!=e){const s=[e];for(let e=1,r=t.length;e<r;e+=1){const r=this.Maybe_Index_Of(t[e]);if(null==r)return!1;if(!(s[s.length-1]<r))return!1;s.push(r)}return!0}return!1}Has_Shift_Left(){return this.Has(Key.SHIFT_LEFT)}Has_Shift_Right(){return this.Has(Key.SHIFT_RIGHT)}Has_Control_Left(){return this.Has(Key.CONTROL_LEFT)}Has_Control_Right(){return this.Has(Key.CONTROL_RIGHT)}Has_Alt_Left(){return this.Has(Key.ALT_LEFT)}Has_Alt_Right(){return this.Has(Key.ALT_RIGHT)}Add(t){this.Has(t)&&this.Remove(t),this.buffer.push(t)}Remove(t){const e=this.Maybe_Index_Of(t);null!=e&&this.buffer.splice(e,1)}Keys(){return Array.from(this.buffer)}}