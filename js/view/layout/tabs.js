var __awaiter=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function l(t){try{a(n.next(t))}catch(t){r(t)}}function o(t){try{a(n.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(l,o)}a((n=n.apply(t,e||[])).next())}))};import*as Event from"../../event.js";import*as Events from"../events.js";import*as Entity from"../entity.js";import*as Tab from"./tab.js";export class Instance extends Entity.Instance{constructor({model:t,taskbar:e}){super({element:"div",parent:e,event_grid:e.Event_Grid()}),this.model=t,this.kill_index=null,this.Live()}On_Life(){return[new Event.Listener_Info({event_name:new Event.Name(Event.Prefix.AFTER,Events.WINDOW_CLOSE,this.Taskbar().Layout().ID()),event_handler:this.After_Window_Close,event_priority:0})]}On_Refresh(){if(null==this.kill_index){const t=this.Model().Tab_Count(),e=this.Child_Count(),i=t-e;if(i<0)for(let t=e,n=e+i;t>n;)t-=1,this.Abort_Child(this.Child(t));else if(i>0)for(let t=e,n=e+i;t<n;t+=1)new Tab.Instance({model:()=>this.Model().Tab_At(t),tabs:this})}else{this.Abort_Child(this.Child(this.kill_index)),this.Skip_Children();for(let t=this.kill_index,e=this.Child_Count();t<e;t+=1){this.Child(t).__Set_Model__((()=>this.Model().Tab_At(t)))}}}On_Reclass(){return["Tabs"]}After_Window_Close(t){return __awaiter(this,arguments,void 0,(function*({window_index:t}){this.kill_index=t,this.Refresh(),this.kill_index=null}))}Model(){return this.model()}Taskbar(){return this.Parent()}}