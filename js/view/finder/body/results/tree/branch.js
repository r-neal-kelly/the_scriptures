import*as Utils from"../../../../../utils.js";import*as Entity from"../../../../entity.js";import*as Tree from"./instance.js";import*as Branch_Name from"./branch_name.js";import*as Branches from"./branches.js";import*as Leaves from"./leaves.js";export class Instance extends Entity.Instance{constructor({parent:e,model:s}){super({element:"div",parent:e,event_grid:e.Event_Grid()}),this.model=s,this.Live()}On_Life(){return[]}On_Refresh(){this.Model().Has_Branches()?this.Has_Branch_Name()&&this.Has_Branches()||(this.Abort_All_Children(),new Branch_Name.Instance({branch:this,model:()=>this.Model()}),new Branches.Instance({branch:this,model:()=>this.Model()})):this.Has_Branch_Name()&&this.Has_Leaves()||(this.Abort_All_Children(),new Branch_Name.Instance({branch:this,model:()=>this.Model()}),new Leaves.Instance({branch:this,model:()=>this.Model()}))}On_Reclass(){return["Branch"]}Model(){return this.model()}Tree(){let e=this.Parent();for(;!(e instanceof Tree.Instance);)e=e.Parent();return e}Has_Branch_Name(){return this.Has_Child(0)&&this.Child(0)instanceof Branch_Name.Instance}Branch_Name(){return 0,this.Child(0)}Has_Branches(){return this.Has_Child(1)&&this.Child(1)instanceof Branches.Instance}Branches(){return 0,this.Child(1)}Has_Leaves(){return this.Has_Child(1)&&this.Child(1)instanceof Leaves.Instance}Leaves(){return 0,this.Child(1)}}