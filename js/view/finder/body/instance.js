import*as Utils from"../../../utils.js";import*as Entity from"../../entity.js";import*as Filter from"./filter.js";import*as Expression from"./expression.js";import*as Results from"./results.js";export class Instance extends Entity.Instance{constructor({model:s,parent:n}){super({element:"div",parent:n,event_grid:n.Event_Grid()}),this.model=s}On_Life(){return this.Add_This_CSS("\n                .Body {\n                    display: grid;\n                    grid-template-rows: auto 1fr 5fr;\n                    grid-template-columns: 1fr;\n                    justify-content: start;\n\n                    position: relative;\n\n                    width: 100%;\n                    height: 100%;\n\n                    overflow-x: hidden;\n                    overflow-y: hidden;\n                }\n            "),this.Add_Children_CSS("\n                .Filter {\n                    position: absolute;\n                    left: 0;\n                    top: 0;\n                    z-index: 1;\n\n                    width: 100%;\n                    height: 100%;\n\n                    background-color: hsl(0, 0%, 0%, 0.7);\n\n                    overflow-x: hidden;\n                    overflow-y: hidden;\n                }\n\n                .Expression {\n                    width: 100%;\n                    height: 100%;\n                    padding: 2px;\n\n                    overflow-x: hidden;\n                    overflow-y: hidden;\n                }\n\n                .Results {\n\n                }\n\n                .Invisible {\n                    display: none;\n                }\n            "),[]}On_Refresh(){this.Has_Filter()&&this.Has_Expression()&&this.Has_Results()||(this.Abort_All_Children(),new Filter.Instance({model:()=>this.Model(),parent:this}),new Expression.Instance({model:()=>this.Model(),parent:this}),new Results.Instance({model:()=>this.Model(),parent:this}))}On_Reclass(){return["Body"]}Model(){return this.model()}Has_Filter(){return this.Has_Child(0)&&this.Child(0)instanceof Filter.Instance}Filter(){return Utils.Assert(this.Has_Filter(),"Does not have Filter."),this.Child(0)}Has_Expression(){return this.Has_Child(1)&&this.Child(1)instanceof Expression.Instance}Expression(){return Utils.Assert(this.Has_Expression(),"Does not have Expression."),this.Child(1)}Has_Results(){return this.Has_Child(2)&&this.Child(2)instanceof Results.Instance}Results(){return Utils.Assert(this.Has_Results(),"Does not have Results."),this.Child(2)}}