import*as Model from"../../../model/buffer/text.js";import*as Model_Language from"../../../model/language.js";import*as Entity from"../../entity.js";import*as Line from"./line.js";export class Instance extends Entity.Instance{constructor({parent:n,model:e,event_grid_id:t}){super({element:"div",parent:n,event_grid:n.Event_Grid()}),this.model=e,this.event_grid_id=t,this.Live()}On_Life(){return this.Add_CSS("\n                .Left_To_Right {\n                    direction: ltr;\n                }\n\n                .Right_To_Left {\n                    direction: rtl;\n                }\n            "),this.Add_This_CSS("\n                .Text {\n                    width: 100%;\n                    padding: 12px 4px 36px 4px;\n                }\n            "),this.Add_Children_CSS("\n                .Line {\n                    display: block;\n\n                    padding: 3px 0px;\n\n                    color: inherit;\n                }\n\n                .Centered_Line {\n                    display: flex;\n                    flex-wrap: wrap;\n                    justify-content: center;\n\n                    text-align: center;\n                }\n\n                .Segment {\n                    display: inline-block;\n\n                    color: inherit;\n                }\n\n                .Item {\n                    display: inline-block;\n\n                    width: auto;\n\n                    border-style: solid;\n                    border-width: 0 0 2px 0;\n                    border-color: transparent;\n\n                    color: inherit;\n                    font-style: normal;\n                    font-weight: normal;\n                    font-variant: normal;\n                    text-decoration: none;\n                }\n                \n                .Indented_Item {\n                    width: 3em;\n                }\n\n                .Blank {\n                    display: none;\n\n                    color: transparent;\n                }\n\n                .Transparent {\n                    color: transparent;\n                }\n\n                .Italic {\n                    font-style: italic;\n                }\n\n                .Bold {\n                    font-weight: bold;\n                }\n\n                .Underline {\n                    text-decoration: underline;\n                }\n\n                .Small_Caps {\n                    font-variant: small-caps;\n                }\n\n                .Error {\n                    border-color: #ffcbcb;\n\n                    color: #ffcbcb;\n                }\n\n                .Argument {\n                    \n                }\n            "),[]}On_Refresh(){const n=this.Model(),e=Math.max(Model.Instance.Min_Line_Count(),n.Line_Count());for(let n=this.Child_Count(),t=e;n<t;n+=1)new Line.Instance({text:this,model:()=>this.Model().Line_At(n)})}On_Reclass(){const n=[];return n.push("Text"),this.Model().Default_Text_Direction()===Model_Language.Direction.LEFT_TO_RIGHT?n.push("Left_To_Right"):n.push("Right_To_Left"),n}On_Restyle(){return this.Model().Default_Font_Styles()}Model(){return this.model()}Event_Grid_ID(){return this.event_grid_id()}}