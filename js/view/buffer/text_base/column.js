import*as Entity from"../../entity.js";export class Instance extends Entity.Instance{constructor({line:n,model:e}){super({element:"div",parent:n,event_grid:n.Event_Grid()}),this.model=e}On_Refresh(){const n=this.Model(),e=this.Child_Count();if(e>0&&n.Is_Blank())this.Skip_Children(),this.Element().classList.contains("Blank")&&this.Skip_Remaining_Siblings();else{for(let t=e,r=Math.max(n.Min_Row_Count(),n.Row_Count());t<r;t+=1)this.Add_Row(t)}}On_Reclass(){const n=this.Model(),e=[];return e.push("Column"),n.Is_Blank()?e.push("Blank"):n.Is_Marginal()?e.push("Marginal_Column"):n.Is_Inter_Marginal()?e.push("Inter_Marginal_Column"):n.Is_Interlinear()?e.push("Interlinear_Column"):n.Is_Inter_Interlinear()&&e.push("Inter_Interlinear_Column"),e}On_Restyle(){const n=this.Model();if(n.Is_Blank())return"";{const e=n.Text();return e.Is_Interlinear()||e.Is_Inter_Interlinear()?`\n                    grid-template-rows: repeat(${e.Row_Count()}, 1fr);\n                `:`\n                    grid-template-rows: repeat(${e.Row_Count()}, min-content);\n                `}}Model(){return this.model()}Buffer(){return this.Line().Buffer()}Line(){return this.Parent()}Event_Grid_ID(){return this.Buffer().Event_Grid_ID()}}