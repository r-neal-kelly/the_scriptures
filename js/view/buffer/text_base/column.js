import*as Entity from"../../entity.js";export class Instance extends Entity.Instance{constructor({line:n,model:t}){super({element:"div",parent:n,event_grid:n.Event_Grid()}),this.model=t}On_Refresh(){const n=this.Model(),t=this.Child_Count();if(t>0&&n.Is_Blank())this.Skip_Children(),this.Element().classList.contains("Blank")&&this.Skip_Remaining_Siblings();else{const e=Math.max(n.Min_Row_Buffer_Count(),n.Row_Count()),r=Math.max(n.Max_Row_Buffer_Count(),n.Row_Count());if(t<e)for(let n=t,r=e;n<r;n+=1)this.Add_Row(n);else if(t>r)for(let n=t,e=r;n>e;)n-=1,this.Abort_Child(this.Child(n))}}On_Reclass(){const n=this.Model(),t=[];return t.push("Column"),n.Is_Blank()?t.push("Blank"):n.Is_Marginal()?t.push("Marginal_Column"):n.Is_Inter_Marginal()?t.push("Inter_Marginal_Column"):n.Is_Interlinear()?t.push("Interlinear_Column"):n.Is_Inter_Interlinear()?t.push("Inter_Interlinear_Column"):n.Is_Fully_Tabular()&&t.push("Fully_Tabular_Column"),t}On_Restyle(){const n=this.Model();if(n.Is_Blank())return"";{const t=n.Text();return t.Is_Interlinear()||t.Is_Inter_Interlinear()?`\n                    grid-template-rows: repeat(${t.Row_Count()}, 1fr);\n                `:`\n                    grid-template-rows: repeat(${t.Row_Count()}, min-content);\n                `}}Model(){return this.model()}Buffer(){return this.Line().Buffer()}Line(){return this.Parent()}}