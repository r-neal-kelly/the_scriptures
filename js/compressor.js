import*as Utils from"./utils.js";import*as Unicode from"./unicode.js";export function LZSS_Compress(t,e=32){0,0;const n=new class{constructor({text:t,memory_in_kilobytes:e}){this.text=t,this.text_index=0,this.memory="",this.max_memory_length=1024*e/2}Initial_Matches(t){0;const e=[];let n=new Unicode.Iterator({text:this.memory});for(;!n.Is_At_End();n=n.Next())if(n.Point()===t){const o=n.Index();e.push([o,o+t.length])}return e}Matches(t,e){const n=[];for(const[o,i]of t){const t=i-o,s=t+Unicode.First_Point(this.memory.slice(i)).length,r=o+s;s>t&&e.length>=s&&e.slice(0,s)===this.memory.slice(o,r)&&n.push([o,r])}return n}Move_Memory(t){for(;this.memory.length+t>this.max_memory_length;){const t=Unicode.First_Point(this.memory);this.text_index+=t.length,this.memory=this.memory.slice(t.length)}this.memory=this.text.slice(this.text_index,this.text_index+this.memory.length+t)}Token(t){0;const e=t.Point(),n=this.Initial_Matches(e);if(n.length>0){const o=t.Points();let i=n,s=i;for(;i.length>0;)s=i,i=this.Matches(s,o);const r=s[s.length-1],h=r[1]-r[0],m=this.text_index+r[0],c=this.text_index+r[1],l=String.fromCodePoint(0)+String.fromCodePoint(m)+String.fromCodePoint(c);return l.length<h?(this.Move_Memory(h),[l,new Unicode.Iterator({text:t.Text(),index:t.Index()+h})]):(this.Move_Memory(e.length),[e,t.Next()])}return this.Move_Memory(e.length),[e,t.Next()]}}({text:t,memory_in_kilobytes:e});let o="",i=new Unicode.Iterator({text:t});for(;!i.Is_At_End();){const[t,e]=n.Token(i);o+=t,i=e}return o}export function LZSS_Decompress(t){const e=String.fromCodePoint(0);let n="",o=new Unicode.Iterator({text:t});for(;!o.Is_At_End();)if(o.Point()===e){o=o.Next();const t=o.Point().codePointAt(0);o=o.Next();const e=o.Point().codePointAt(0);n+=n.slice(t,e),o=o.Next()}else n+=o.Point(),o=o.Next();return n}