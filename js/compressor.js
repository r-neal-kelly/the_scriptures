import*as Utils from"./utils.js";import*as Unicode from"./unicode.js";export const LZSS_INDEX_COUNT=Unicode.POINT_COUNT;export const LZSS_LAST_INDEX=Unicode.LAST_POINT;export const LZSS_ESCAPE_INDEX=16;export const LZSS_ESCAPE_STRING=String.fromCodePoint(LZSS_ESCAPE_INDEX);export const LZSS_MAX_STRING_LENGTH=LZSS_LAST_INDEX*LZSS_INDEX_COUNT+LZSS_LAST_INDEX;export const LZSS_MAX_MEMORY_LENGTH=LZSS_INDEX_COUNT;var LZSS_Pair_Flags;function LZSS_Write_Pair(e,t){0,0;let _=0;return e>=Unicode.LEADING_SURROGATE.FIRST&&e<=Unicode.TRAILING_SURROGATE.LAST&&(_|=LZSS_Pair_Flags.SURROGATE_INDEX_A,e-=Unicode.LEADING_SURROGATE.FIRST),t>=Unicode.LEADING_SURROGATE.FIRST&&t<=Unicode.TRAILING_SURROGATE.LAST&&(_|=LZSS_Pair_Flags.SURROGATE_INDEX_B,t-=Unicode.LEADING_SURROGATE.FIRST),String.fromCodePoint(_)+String.fromCodePoint(e)+String.fromCodePoint(t)}function LZSS_Read_Pair(e){const t=e.Point().codePointAt(0);0;let _=(e=e.Next()).Point().codePointAt(0);t&LZSS_Pair_Flags.SURROGATE_INDEX_A&&(_+=Unicode.LEADING_SURROGATE.FIRST);let n=(e=e.Next()).Point().codePointAt(0);return t&LZSS_Pair_Flags.SURROGATE_INDEX_B&&(n+=Unicode.LEADING_SURROGATE.FIRST),[e=e.Next(),_,n]}function LZSS_Write_Header(e){let t="";0;return t+=LZSS_Write_Pair(Math.floor(e/LZSS_INDEX_COUNT),e%LZSS_INDEX_COUNT),0,t}function LZSS_Read_Header(e){let t,_;return[e,t,_]=LZSS_Read_Pair(e),[e,t*LZSS_INDEX_COUNT+_]}function LZSS_Write_Token(e,t){return 0,0,LZSS_Write_Pair(e-=1,t-=1)}function LZSS_Read_Token(e){let t,_;return[e,t,_]=LZSS_Read_Pair(e),t+=1,_+=1,[e,t,_]}!function(e){e[e.SURROGATE_INDEX_A=1]="SURROGATE_INDEX_A",e[e.SURROGATE_INDEX_B=2]="SURROGATE_INDEX_B",e[e.UNUSED_1=4]="UNUSED_1",e[e.UNUSED_2=8]="UNUSED_2"}(LZSS_Pair_Flags||(LZSS_Pair_Flags={}));class LZSS_Window{constructor({text:e,max_memory_length:t,optimize_for_utf_8_encoding:_}){this.text=e,this.text_index=0,this.memory="",this.max_memory_length=t,this.optimize_for_utf_8_encoding=_,this.matches_buffer_a=[],this.matches_buffer_b=[]}Initial_Matches(e,t){0,e.splice(0,e.length);let _=new Unicode.Iterator({text:this.memory});for(;!_.Is_At_End();_=_.Next())if(_.Point()===t){const n=_.Index();e.push([n,n+t.length])}}Matches(e,t,_){t.splice(0,t.length);for(const[n,o]of e){const e=o-n,i=e+Unicode.First_Point(this.memory.slice(o)).length,r=n+i;i>e&&_.length>=i&&_.slice(0,i)===this.memory.slice(n,r)&&t.push([n,r])}}Move_Memory(e){for(;this.memory.length+e>this.max_memory_length;){const e=Unicode.First_Point(this.memory);this.text_index+=e.length,this.memory=this.memory.slice(e.length)}this.memory=this.text.slice(this.text_index,this.text_index+this.memory.length+e)}Can_Use_Token(e,t){return this.optimize_for_utf_8_encoding?Unicode.Expected_UTF_8_Unit_Count(e)<Unicode.Expected_UTF_8_Unit_Count(t):e.length<t.length}Write_Non_Token(e){return 0,e.codePointAt(0)>LZSS_ESCAPE_INDEX?e:LZSS_ESCAPE_STRING+e}Token_Or_Non_Token(e){0;const t=e.Point();if(this.Initial_Matches(this.matches_buffer_a,t),this.matches_buffer_a.length>0){const _=e.Points();let n=this.matches_buffer_b,o=this.matches_buffer_a,i=n;for(;o.length>0;)i=n,n=o,o=i,this.Matches(n,o,_);const r=n[n.length-1],s=this.memory.length-r[0],S=r[1]-r[0],a=LZSS_Write_Token(s,S);return this.Can_Use_Token(a,_.slice(0,S))?(this.Move_Memory(S),[new Unicode.Iterator({text:e.Text(),index:e.Index()+S}),a]):(this.Move_Memory(t.length),[new Unicode.Iterator({text:e.Text(),index:e.Index()+t.length}),this.Write_Non_Token(t)])}return this.Move_Memory(t.length),[new Unicode.Iterator({text:e.Text(),index:e.Index()+t.length}),this.Write_Non_Token(t)]}}export function LZSS_Compress(e,{max_memory_length:t,optimize_for_utf_8_encoding:_}={max_memory_length:1024,optimize_for_utf_8_encoding:!0}){0,0;const n=new LZSS_Window({text:e,max_memory_length:t,optimize_for_utf_8_encoding:_});let o,i=LZSS_Write_Header(e.length),r=new Unicode.Iterator({text:e});for(;!r.Is_At_End();)[r,o]=n.Token_Or_Non_Token(r),i+=o;return i}export function LZSS_Decompress(e){let t,_=new Unicode.Iterator({text:e});[_,t]=LZSS_Read_Header(_);const n=new Uint16Array(t);let o=0;for(;!_.Is_At_End();){const e=_.Point();if(e===LZSS_ESCAPE_STRING){_=_.Next();const e=_.Point();_=_.Next(),n[o]=e.charCodeAt(0),o+=1,2===e.length&&(n[o]=e.charCodeAt(1),o+=1)}else{if(e.codePointAt(0)<LZSS_ESCAPE_INDEX){let e,t;[_,e,t]=LZSS_Read_Token(_);const i=o-e,r=i+t;n.copyWithin(o,i,r),o+=t}else{const t=e;_=_.Next(),n[o]=t.charCodeAt(0),o+=1,2===t.length&&(n[o]=t.charCodeAt(1),o+=1)}}}return 0,Utils.Is_Big_Endian()?new TextDecoder("utf-16be").decode(n):new TextDecoder("utf-16le").decode(n)}