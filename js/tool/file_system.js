var __awaiter=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(r,o){function u(t){try{_(n.next(t))}catch(t){o(t)}}function a(t){try{_(n.throw(t))}catch(t){o(t)}}function _(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(u,a)}_((n=n.apply(t,e||[])).next())}))};import*as fs from"fs";export function Read_Entity_Stats(t,e=!1){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(i,n){fs.stat(t,{bigint:e},(function(t,e){null!=t?n(t):i(e)}))}))}))}export function Read_Entity_Last_Modified_Time(t,e=!1){return __awaiter(this,void 0,void 0,(function*(){const i=yield Read_Entity_Stats(t,e);return e?i.mtimeNs:i.mtimeMs}))}export function Read_Folder(t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(e,i){fs.readdir(t,{withFileTypes:!0},(function(t,n){null!=t?i(t):e(n)}))}))}))}export function Read_Folder_File_Paths_Recursively(t,e=[]){return __awaiter(this,void 0,void 0,(function*(){const i=yield Read_Folder(t);for(let n of i)n.isDirectory()?yield Read_Folder_File_Paths_Recursively(`${t}/${n.name}`,e):e.push(`${t}/${n.name}`);return e}))}export function Has_File(t){return fs.existsSync(t)}export function Read_File(t,e="utf8"){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(i,n){fs.readFile(t,e,(function(t,e){null!=t?n(t):i(e)}))}))}))}export function Write_File(t,e,i="utf8"){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(n,r){fs.writeFile(t,e,i,(function(t){null!=t?r(t):n()}))}))}))}export function Read_And_Write_File_With_No_Carriage_Returns(t){return __awaiter(this,void 0,void 0,(function*(){let e=yield Read_File(t);return/\r/.test(e)&&(e=e.replace(/\r?\n/g,"\n"),yield Write_File(t,e)),e}))}export function Folder_Names(t){return __awaiter(this,void 0,void 0,(function*(){const e=[],i=yield Read_Folder(t);for(let t of i)t.isDirectory()&&e.push(t.name);return e}))}export function File_Names(t){return __awaiter(this,void 0,void 0,(function*(){const e=[],i=yield Read_Folder(t);for(let t of i)t.isFile()&&e.push(t.name);return e}))}