var __awaiter=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function u(t){try{_(i.next(t))}catch(t){o(t)}}function a(t){try{_(i.throw(t))}catch(t){o(t)}}function _(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}_((i=i.apply(t,e||[])).next())}))};import*as fs from"fs";export function Read_Entity_Stats(t){return __awaiter(this,arguments,void 0,(function*(t,e=!1){return new Promise((function(n,i){fs.stat(t,{bigint:e},(function(t,e){null!=t?i(t):n(e)}))}))}))}export function Read_Entity_Last_Modified_Time(t){return __awaiter(this,arguments,void 0,(function*(t,e=!1){const n=yield Read_Entity_Stats(t,e);return e?n.mtimeNs:n.mtimeMs}))}export function Read_Folder(t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(e,n){fs.readdir(t,{withFileTypes:!0},(function(t,i){null!=t?n(t):e(i)}))}))}))}export function Read_Folder_File_Paths_Recursively(t){return __awaiter(this,arguments,void 0,(function*(t,e=[]){const n=yield Read_Folder(t);for(let i of n)i.isDirectory()?yield Read_Folder_File_Paths_Recursively(`${t}/${i.name}`,e):e.push(`${t}/${i.name}`);return e}))}export function Has_File(t){return fs.existsSync(t)}export function Read_File(t){return __awaiter(this,arguments,void 0,(function*(t,e="utf8"){return new Promise((function(n,i){fs.readFile(t,e,(function(t,e){null!=t?i(t):n(e)}))}))}))}export function Write_File(t,e){return __awaiter(this,arguments,void 0,(function*(t,e,n="utf8"){return new Promise((function(i,r){fs.writeFile(t,e,n,(function(t){null!=t?r(t):i()}))}))}))}export function Delete_File(t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(e,n){fs.unlink(t,(function(t){null!=t?n(t):e()}))}))}))}export function Read_And_Write_File_With_No_Carriage_Returns(t){return __awaiter(this,void 0,void 0,(function*(){let e=yield Read_File(t);return/\r/.test(e)&&(e=e.replace(/\r?\n/g,"\n"),yield Write_File(t,e)),e}))}export function Folder_Names(t){return __awaiter(this,void 0,void 0,(function*(){const e=[],n=yield Read_Folder(t);for(let t of n)t.isDirectory()&&e.push(t.name);return e}))}export function File_Names(t){return __awaiter(this,void 0,void 0,(function*(){const e=[],n=yield Read_Folder(t);for(let t of n)t.isFile()&&e.push(t.name);return e}))}