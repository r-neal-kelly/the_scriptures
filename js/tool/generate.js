var __awaiter=this&&this.__awaiter||function(t,e,n,_){return new(n||(n=Promise))((function(o,a){function r(t){try{s(_.next(t))}catch(t){a(t)}}function i(t){try{s(_.throw(t))}catch(t){a(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,i)}s((_=_.apply(t,e||[])).next())}))};import*as process from"process";import*as Utils from"../utils.js";import*as Unicode from"../unicode.js";import*as Language from"../model/language.js";import*as Name_Sorter from"../model/name_sorter.js";import*as Data from"../model/data.js";import*as Text from"../model/text.js";import*as File_System from"./file_system.js";const TIMESTAMP_PATH="./.timestamp",README_PATH="./README.md",DATA_PATH="./data",INFO_JSON_NAME="Info.json",ORDER_JSON_NAME="Order.json",DICTIONARY_JSON_NAME="Dictionary.json",UNIQUE_PARTS_JSON_NAME="Unique_Parts.json",DEFAULT_LAST_TIMESTAMP=0,NAME_SORTER=Name_Sorter.Singleton(),LINE_PATH_TYPE=Text.Line.Path_Type.DEFAULT;class Unique_Parts{constructor(){this.parts={}}Add(t){this.parts.hasOwnProperty(t)?(Utils.Assert(this.parts[t]<Number.MAX_SAFE_INTEGER,"Cannot add more of this unique part!"),this.parts[t]+=1):this.parts[t]=1}Values(){return Object.keys(this.parts).sort(function(t,e){return this.parts[e]-this.parts[t]}.bind(this))}Count(t){return Utils.Assert(this.parts.hasOwnProperty(t),"Does not have part."),this.parts[t]}}function Read_And_Sort_File_Names(t){return __awaiter(this,void 0,void 0,(function*(){return File_System.Has_File(`${t}/${ORDER_JSON_NAME}`)?JSON.parse(yield File_System.Read_File(`${t}/${ORDER_JSON_NAME}`)):(yield File_System.File_Names(t)).filter((function(t){return/\.txt$/.test(t)&&!/COPY\.txt$/.test(t)})).sort()}))}function Read_File_Text(t){return __awaiter(this,void 0,void 0,(function*(){const e=yield File_System.Read_And_Write_File_With_No_Carriage_Returns(t);return Utils.Assert(Language.Greek.Normalize_With_Combined_Points(Language.Greek.Normalize_With_Baked_Points(e))===e,`\n            Failed to reproduce original file_text after Greek normalization!\n            ${t}\n        `),e}))}function Should_Version_Be_Updated(t,e,n){return __awaiter(this,void 0,void 0,(function*(){for(const n of[`${e}/${INFO_JSON_NAME}`,`${e}/${DICTIONARY_JSON_NAME}`,`${e}/${UNIQUE_PARTS_JSON_NAME}`])if(!File_System.Has_File(n)||(yield File_System.Read_Entity_Last_Modified_Time(n))>t)return!0;if(File_System.Has_File(`${e}/${ORDER_JSON_NAME}`)&&(yield File_System.Read_Entity_Last_Modified_Time(`${e}/${ORDER_JSON_NAME}`))>t)return!0;for(const _ of n){const n=`${e}/${_}`;if((yield File_System.Read_Entity_Last_Modified_Time(n))>t)return!0}return!1}))}function Decompression_Line_Mismatches(t,e){const n=t.split(/\r?\n/),_=e.split(/\r?\n/);let o="";for(let t=0,e=n.length;t<e;t+=1)t<_.length?n[t]!==_[t]&&(o+=`${t}: ${n[t]} !== ${_[t]}\n`):o+=`${t}: <missing line>\n`;return""===o?"<no mismatching lines>":o}function Generate(t){return __awaiter(this,void 0,void 0,(function*(){const e=t?0:File_System.Has_File("./.timestamp")?yield File_System.Read_Entity_Last_Modified_Time("./.timestamp"):0,n=new Data.Info({});0===e?console.log("    Forcefully generating all files..."):console.log("    Only generating out-of-date files..."),yield function(){return __awaiter(this,void 0,void 0,(function*(){const t="./data/Books";for(const _ of(yield File_System.Folder_Names(t)).sort()){const o=`${t}/${_}`,a={name:_,languages:[]};n.Tree().books.push(a),n.Add_Unique_Book_Name(_);for(const t of(yield File_System.Folder_Names(o)).sort()){const r=`${o}/${t}`,i={name:t,versions:[]};a.languages.push(i),n.Add_Unique_Language_Name(t);for(const o of(yield File_System.Folder_Names(r)).sort()){const a=`${r}/${o}`,s=yield Read_And_Sort_File_Names(a),l={name:o,files:s.map(Utils.Remove_File_Extension)};if(i.versions.push(l),n.Add_Unique_Version_Name(o),yield Should_Version_Be_Updated(e,a,s)){const e={total_unit_count:0,total_point_count:0,total_letter_count:0,total_marker_count:0,total_meta_letter_count:0,total_word_count:0,total_break_count:0,total_meta_word_count:0,total_part_count:0,total_line_count:0,total_file_count:0},n=yield File_System.Read_File(`${a}/${DICTIONARY_JSON_NAME}`),r=new Text.Dictionary.Instance({json:n}),i=new Unique_Parts,l=[];Utils.Assert(e.total_file_count+s.length<=Number.MAX_SAFE_INTEGER),r.Validate(),e.total_file_count+=s.length;for(const n of s){const s=`${a}/${n}`,u=yield Read_File_Text(s),c=new Text.Instance({dictionary:r,value:u});Utils.Assert(e.total_line_count+c.Line_Count()<=Number.MAX_SAFE_INTEGER),l.push(u),e.total_line_count+=c.Line_Count();for(let a=0,r=c.Line_Count();a<r;a+=1){const r=c.Line(a);for(let s=0,l=r.Macro_Part_Count(LINE_PATH_TYPE);s<l;s+=1){const l=r.Macro_Part(s,LINE_PATH_TYPE),u=l.Part_Type(),c=l.Value(),m=c.length,d=Unicode.Point_Count(c);if(Utils.Assert(!l.Is_Unknown(),`Unknown part! Cannot generate:\n   Book Name:          ${_}\n   Language Name:      ${t}\n   Version Name:       ${o}\n   File Name:          ${n}\n   Line Index:         ${a}\n   Macro Part Index:   ${s}\n   Macro Part Value:   ${c}\n`),l.Is_Error()&&Utils.Assert(l.Has_Error_Style(),`Error not wrapped with error command! Should not generate:\n   Book Name:          ${_}\n   Language Name:      ${t}\n   Version Name:       ${o}\n   File Name:          ${n}\n   Line Index:         ${a}\n   Macro Part Index:   ${s}\n   Macro Part Value:   ${c}\n`),Utils.Assert(e.total_unit_count+m<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_point_count+d<=Number.MAX_SAFE_INTEGER),i.Add(c),e.total_unit_count+=m,e.total_point_count+=d,u===Text.Part.Type.LETTER)Utils.Assert(e.total_letter_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_letter_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.MARKER)Utils.Assert(e.total_marker_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_marker_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.WORD)Utils.Assert(e.total_letter_count+d<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_word_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_letter_count+=d,e.total_word_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.BREAK)Utils.Assert(e.total_marker_count+d<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_break_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_marker_count+=d,e.total_break_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.COMMAND){const t=l;Utils.Assert(e.total_meta_letter_count+d<=Number.MAX_SAFE_INTEGER),e.total_meta_letter_count+=d,t.Is_Last_Of_Split()||(Utils.Assert(e.total_meta_word_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_meta_word_count+=1,e.total_part_count+=1)}}}}const u=[],c=l.join(Data.Version.Symbol.FILE_BREAK),m=i.Values(),d=new Data.Compressor.Instance({unique_parts:m}),A=d.Compress_Dictionary({dictionary_value:n}),N=d.Decompress_Dictionary({dictionary_value:A}),g=d.Compress_File({dictionary:r,file_value:c}),E=d.Decompress_File({dictionary:r,file_value:g});Utils.Assert(N===n,"Invalid dictionary decompression!"),Utils.Assert(E===c,`Invalid decompression!\n   Book Name: ${_}\n   Language Name: ${t}\n   Version Name: ${o}\n${Decompression_Line_Mismatches(c,E)}`),u.push(File_System.Write_File(`${a}/${INFO_JSON_NAME}`,JSON.stringify(e))),u.push(File_System.Write_File(`${a}/${UNIQUE_PARTS_JSON_NAME}`,JSON.stringify(m))),u.push(File_System.Write_File(`${a}/${Data.Version.Dictionary.Symbol.NAME}.${Data.Version.Dictionary.Symbol.EXTENSION}`,A)),u.push(File_System.Write_File(`${a}/${Data.Version.Text.Symbol.NAME}.${Data.Version.Text.Symbol.EXTENSION}`,g));for(let e=0,n=s.length;e<n;e+=1){const n=s[e],i=l[e],c=d.Compress_File({dictionary:r,file_value:i}),m=d.Decompress_File({dictionary:r,file_value:c});Utils.Assert(m===i,`Invalid decompression!\n   Book Name: ${_}\n   Language Name: ${t}\n   Version Name: ${o}\n   File Name: ${n}\n${Decompression_Line_Mismatches(i,m)}`),u.push(File_System.Write_File(`${a}/${n.replace(/\.[^.]*$/,`.${Data.Version.Dictionary.Symbol.EXTENSION}`)}`,c))}yield Promise.all(u),console.log(`        Generated ${_}/${t}/${o}...`)}const u=JSON.parse(yield File_System.Read_File(`${a}/${INFO_JSON_NAME}`));n.Increment_Total_Unit_Count(u.total_unit_count),n.Increment_Total_Point_Count(u.total_point_count),n.Increment_Total_Letter_Count(u.total_letter_count),n.Increment_Total_Marker_Count(u.total_marker_count),n.Increment_Total_Meta_Letter_Count(u.total_meta_letter_count),n.Increment_Total_Word_Count(u.total_word_count),n.Increment_Total_Break_Count(u.total_break_count),n.Increment_Total_Meta_Word_Count(u.total_meta_word_count),n.Increment_Total_Part_Count(u.total_part_count),n.Increment_Total_Line_Count(u.total_line_count),n.Increment_Total_File_Count(u.total_file_count),n.Increment_Total_Book_Count(1),n.Increment_Language_Unit_Count(t,u.total_unit_count),n.Increment_Language_Point_Count(t,u.total_point_count),n.Increment_Language_Letter_Count(t,u.total_letter_count),n.Increment_Language_Marker_Count(t,u.total_marker_count),n.Increment_Language_Meta_Letter_Count(t,u.total_meta_letter_count),n.Increment_Language_Word_Count(t,u.total_word_count),n.Increment_Language_Break_Count(t,u.total_break_count),n.Increment_Language_Meta_Word_Count(t,u.total_meta_word_count),n.Increment_Language_Part_Count(t,u.total_part_count),n.Increment_Language_Line_Count(t,u.total_line_count),n.Increment_Language_File_Count(t,u.total_file_count),n.Increment_Language_Book_Count(t,1)}}}n.Freeze(),yield File_System.Write_File(`./data/${INFO_JSON_NAME}`,JSON.stringify(n))}))}(),yield function(){return __awaiter(this,void 0,void 0,(function*(){let t=yield File_System.Read_File(README_PATH);const e="## Stats";let _=null,o=null;for(let i=0,s=t.length;i<s;i+=1){const l=t.slice(i);null===_?l.slice(0,e.length)===e&&(_=i):null===o&&"##"===l.slice(0,"##".length)&&(o=i)}if(null!==_){function a(t,e){let n="";for(const _ of e)n+=`${t}    - ${_}\n`;return n}function r(t,e){let n="";for(const[_,o,a]of e)n+=`${t}    - ${_}: ${Utils.Add_Commas_To_Number(o)} (~${a}%)\n`;return n}null===o&&(o=t.length),t=t.slice(0,_)+"## Stats\n\n"+`- Unique Languages: ${n.Unique_Language_Name_Count_String()}\n`+a("",n.Unique_Language_Names())+`- Unique Versions: ${n.Unique_Version_Name_Count_String()}\n`+a("",n.Unique_Version_Names())+`- Unique Books: ${n.Unique_Book_Name_Count_String()}\n`+a("",n.Unique_Book_Names())+"\n<br>\n\n"+`- Total Books: ${n.Total_Book_Count_String()}\n`+r("",n.Language_Book_Counts_And_Percents_Array())+`- Total Files: ${n.Total_File_Count_String()}\n`+r("",n.Language_File_Counts_And_Percents_Array())+`- Total Lines: ${n.Total_Line_Count_String()}\n`+r("",n.Language_Line_Counts_And_Percents_Array())+`- Total Parts: ${n.Total_Part_Count_String()}\n    - <i>By Language</i>\n`+r("    ",n.Language_Part_Counts_And_Percents_Array())+"    - <i>By Components</i>\n"+`        - Words: ${n.Total_Word_Count_String()} (~${n.Total_Word_Percent()}%)\n`+r("        ",n.Language_Word_Counts_And_Percents_Array())+`        - Meta-Words: ${n.Total_Meta_Word_Count_String()} (~${n.Total_Meta_Word_Percent()}%)\n`+r("        ",n.Language_Meta_Word_Counts_And_Percents_Array())+`        - Non-Words: ${n.Total_Break_Count_String()} (~${n.Total_Break_Percent()}%)\n`+r("        ",n.Language_Break_Counts_And_Percents_Array())+`- Total Unicode Points: ${n.Total_Point_Count_String()}\n    - <i>By Language</i>\n`+r("    ",n.Language_Point_Counts_And_Percents_Array())+"    - <i>By Components</i>\n"+`        - Letters: ${n.Total_Letter_Count_String()} (~${n.Total_Letter_Percent()}%)\n`+r("        ",n.Language_Letter_Counts_And_Percents_Array())+`        - Meta-Letters: ${n.Total_Meta_Letter_Count_String()} (~${n.Total_Meta_Letter_Percent()}%)\n`+r("        ",n.Language_Meta_Letter_Counts_And_Percents_Array())+`        - Non-Letters: ${n.Total_Marker_Count_String()} (~${n.Total_Marker_Percent()}%)\n`+r("        ",n.Language_Marker_Counts_And_Percents_Array())+t.slice(o,t.length)}yield File_System.Write_File(README_PATH,t)}))}(),yield File_System.Write_File("./.timestamp","")}))}!function(){__awaiter(this,void 0,void 0,(function*(){const t=process.argv.slice(2);yield Generate(t.includes("-f")||t.includes("--force"))}))}();