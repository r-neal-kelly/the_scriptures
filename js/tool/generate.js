var __awaiter=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(a,r){function s(t){try{i(n.next(t))}catch(t){r(t)}}function _(t){try{i(n.throw(t))}catch(t){r(t)}}function i(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,_)}i((n=n.apply(t,e||[])).next())}))};import*as fs from"fs";import*as Utils from"../utils.js";import*as Unicode from"../unicode.js";import*as Language from"../model/language.js";import*as Data from"../model/data.js";import*as Text from"../model/text.js";const LINE_PATH_TYPE=Text.Line.Path_Type.DEFAULT;function Read_Directory(t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(e,o){fs.readdir(t,{withFileTypes:!0},(function(t,n){null!=t?o(t):e(n)}))}))}))}function Has_File(t){return fs.existsSync(t)}function Read_File(t,e="utf8"){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(o,n){fs.readFile(t,e,(function(t,e){null!=t?n(t):o(e)}))}))}))}function Write_File(t,e,o="utf8"){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(n,a){fs.writeFile(t,e,o,(function(t){null!=t?a(t):n()}))}))}))}function Folder_Names(t){return __awaiter(this,void 0,void 0,(function*(){const e=[],o=yield Read_Directory(t);for(let t of o)t.isDirectory()&&e.push(t.name);return e}))}function File_Names(t){return __awaiter(this,void 0,void 0,(function*(){const e=[],o=yield Read_Directory(t);for(let t of o)t.isFile()&&e.push(t.name);return e}))}class Unique_Names{constructor(){this.name_sorter=new Data.Name_Sorter.Instance,this.books=new Set,this.languages=new Set,this.versions=new Set}Add_Book(t){this.books.add(t)}Add_Language(t){this.languages.add(t)}Add_Version(t){this.versions.add(t)}Books(){return this.name_sorter.With_Set(Data.Name_Sorter.Type.BOOKS,this.books)}Languages(){return this.name_sorter.With_Set(Data.Name_Sorter.Type.LANGUAGES,this.languages)}Versions(){return this.name_sorter.With_Set(Data.Name_Sorter.Type.VERSIONS,this.versions)}}class Unique_Parts{constructor(){this.parts={}}Add(t){this.parts.hasOwnProperty(t)?(Utils.Assert(this.parts[t]<Number.MAX_SAFE_INTEGER,"Cannot add more of this unique part!"),this.parts[t]+=1):this.parts[t]=1}Values(){return Object.keys(this.parts).sort(function(t,e){return this.parts[e]-this.parts[t]}.bind(this))}Count(t){return Utils.Assert(this.parts.hasOwnProperty(t),"Does not have part."),this.parts[t]}}function Filter_File_Names(t){return/\.txt$/.test(t)&&!/COPY\.txt$/.test(t)}function Sorted_File_Names(t){return __awaiter(this,void 0,void 0,(function*(){return Has_File(`${t}/Order.json`)?JSON.parse(yield Read_File(`${t}/Order.json`)):(yield File_Names(t)).filter(Filter_File_Names).sort()}))}function Assert_Greek_Normalization(t,e){Utils.Assert(Language.Greek.Normalize_With_Combined_Points(Language.Greek.Normalize_With_Baked_Points(e))===e,`\n            failed to reproduce original file_text after Greek normalization\n            ${t}\n        `)}function Generate(){return __awaiter(this,void 0,void 0,(function*(){const t={tree:{books:[]},unique_book_names:[],unique_language_names:[],unique_version_names:[],unique_part_values:{},total_unit_count:0,total_point_count:0,total_letter_count:0,total_marker_count:0,total_meta_letter_count:0,total_word_count:0,total_break_count:0,total_meta_word_count:0,total_part_count:0,total_line_count:0,total_file_count:0,total_book_count:0},e=new Unique_Names,o={};function n(t,e){const o=e.Part_Type(),n=e.Value(),a=n.length,r=Unicode.Point_Count(n);if(Utils.Assert(t.total_unit_count+a<=Number.MAX_SAFE_INTEGER),t.total_unit_count+=a,Utils.Assert(t.total_point_count+r<=Number.MAX_SAFE_INTEGER),t.total_point_count+=r,o===Text.Part.Type.LETTER)Utils.Assert(t.total_letter_count+1<=Number.MAX_SAFE_INTEGER),t.total_letter_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(o===Text.Part.Type.MARKER)Utils.Assert(t.total_marker_count+1<=Number.MAX_SAFE_INTEGER),t.total_marker_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(o===Text.Part.Type.WORD)Utils.Assert(t.total_letter_count+r<=Number.MAX_SAFE_INTEGER),t.total_letter_count+=r,Utils.Assert(t.total_word_count+1<=Number.MAX_SAFE_INTEGER),t.total_word_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(o===Text.Part.Type.BREAK)Utils.Assert(t.total_marker_count+r<=Number.MAX_SAFE_INTEGER),t.total_marker_count+=r,Utils.Assert(t.total_break_count+1<=Number.MAX_SAFE_INTEGER),t.total_break_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(o===Text.Part.Type.COMMAND){const o=e;Utils.Assert(t.total_meta_letter_count+r<=Number.MAX_SAFE_INTEGER),t.total_meta_letter_count+=r,o.Is_Last_Of_Split()||(Utils.Assert(t.total_meta_word_count+1<=Number.MAX_SAFE_INTEGER),t.total_meta_word_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1)}}const a="./data",r=`${a}/Books`;for(const a of(yield Folder_Names(r)).sort()){const s=`${r}/${a}`,_={name:a,languages:[]};t.tree.books.push(_),e.Add_Book(a);for(const r of(yield Folder_Names(s)).sort()){const i=`${s}/${r}`,l={name:r,versions:[]};_.languages.push(l),e.Add_Language(r),null==o[r]&&(o[r]=new Unique_Parts);for(const s of(yield Folder_Names(i)).sort()){const _=`${i}/${s}`,u={name:s,files:[]},c=new Text.Dictionary.Instance({json:yield Read_File(`${_}/Dictionary.json`)}),d=yield Sorted_File_Names(_);l.versions.push(u),e.Add_Version(s),c.Validate(),t.total_book_count+=1,t.total_file_count+=d.length;for(const e of d){const i=`${_}/${e}`,l=Utils.Remove_File_Extension(e),d=new Text.Instance({dictionary:c,value:yield Read_File(i)});u.files.push(l),t.total_line_count+=d.Line_Count();for(let _=0,i=d.Line_Count();_<i;_+=1){const i=d.Line(_);for(let l=0,u=i.Macro_Part_Count(LINE_PATH_TYPE);l<u;l+=1){const u=i.Macro_Part(l,LINE_PATH_TYPE);Utils.Assert(!u.Is_Unknown(),`Unknown part! Cannot generate:\n   Book Name:          ${a}\n   Language Name:      ${r}\n   Version Name:       ${s}\n   File Name:          ${e}\n   Line Index:         ${_}\n   Macro Part Index:   ${l}\n   Macro Part Value:   ${u.Value()}\n`),u.Is_Error()&&Utils.Assert(u.Has_Error_Style(),`Error not wrapped with error command! Should not generate:\n   Book Name:          ${a}\n   Language Name:      ${r}\n   Version Name:       ${s}\n   File Name:          ${e}\n   Line Index:         ${_}\n   Macro Part Index:   ${l}\n   Macro Part Value:   ${u.Value()}\n`),o[r].Add(u.Value()),n(t,u)}}}}}}t.unique_book_names=e.Books(),t.unique_language_names=e.Languages(),t.unique_version_names=e.Versions();for(const e of Object.keys(o))t.unique_part_values[e]=o[e].Values();Utils.Assert(t.total_word_count+t.total_meta_word_count+t.total_break_count===t.total_part_count,"Miscount of total_part_count"),Utils.Assert(t.total_letter_count+t.total_meta_letter_count+t.total_marker_count===t.total_point_count,"Miscount of total_point_count."),yield Write_File(`${a}/Info.json`,JSON.stringify(t));for(const e of(yield Folder_Names(r)).sort()){const o=`${r}/${e}`;for(const e of(yield Folder_Names(o)).sort()){const n=`${o}/${e}`,a=new Data.Compressor.Instance({unique_parts:t.unique_part_values[e]});for(const t of(yield Folder_Names(n)).sort()){const e=`${n}/${t}`,o=yield Sorted_File_Names(e),r=[],s=yield Read_File(`${e}/Dictionary.json`),_=new Text.Dictionary.Instance({json:s}),i=a.Compress_Dictionary(s),l=a.Decompress_Dictionary(i);Utils.Assert(l===s,"Invalid dictionary decompression!"),yield Write_File(`${e}/${Data.Version.Dictionary.Symbol.NAME}.${Data.Version.Dictionary.Symbol.EXTENSION}`,i);for(const t of o){const o=`${e}/${t}`,n=yield Read_File(o);r.push(n),Assert_Greek_Normalization(o,n);const s=a.Compress({value:n,dictionary:_}),i=a.Decompress({value:s,dictionary:_});Utils.Assert(i===n,"Invalid decompression!"),yield Write_File(`${e}/${t.replace(/\.[^.]*$/,`.${Data.Version.Dictionary.Symbol.EXTENSION}`)}`,s)}const u=r.join(Data.Version.Symbol.FILE_BREAK),c=a.Compress({value:u,dictionary:_}),d=a.Decompress({value:c,dictionary:_});Utils.Assert(d===u,"Invalid decompression!"),yield Write_File(`${e}/${Data.Version.Text.Symbol.NAME}.${Data.Version.Text.Symbol.EXTENSION}`,c)}}}yield function(t){return __awaiter(this,void 0,void 0,(function*(){let e=yield Read_File("./README.md");const o="## Stats";let n=null,a=null;for(let t=0,r=e.length;t<r;t+=1){const r=e.slice(t);null===n?r.slice(0,o.length)===o&&(n=t):null===a&&"##"===r.slice(0,"##".length)&&(a=t)}if(null!==n){null===a&&(a=e.length);const o=Math.round(100*t.total_word_count/t.total_part_count),r=Math.round(100*t.total_meta_word_count/t.total_part_count),s=Math.round(100*t.total_break_count/t.total_part_count),_=Math.round(100*t.total_letter_count/t.total_point_count),i=Math.round(100*t.total_meta_letter_count/t.total_point_count),l=Math.round(100*t.total_marker_count/t.total_point_count);e=e.slice(0,n)+"## Stats\n\n"+`- Unique Languages: ${Utils.Add_Commas_To_Number(t.unique_language_names.length)}\n`+`- Unique Versions: ${Utils.Add_Commas_To_Number(t.unique_version_names.length)}\n`+`- Unique Books: ${Utils.Add_Commas_To_Number(t.unique_book_names.length)}\n\n<br>\n\n`+`- Total Books: ${Utils.Add_Commas_To_Number(t.total_book_count)}\n`+`- Total Files: ${Utils.Add_Commas_To_Number(t.total_file_count)}\n`+`- Total Lines: ${Utils.Add_Commas_To_Number(t.total_line_count)}\n`+`- Total Parts: ${Utils.Add_Commas_To_Number(t.total_part_count)}\n`+`    - Words: ${Utils.Add_Commas_To_Number(t.total_word_count)} (~${o}%)\n`+`    - Meta-Words: ${Utils.Add_Commas_To_Number(t.total_meta_word_count)} (~${r}%)\n`+`    - Non-Words: ${Utils.Add_Commas_To_Number(t.total_break_count)} (~${s}%)\n`+`- Total Unicode Points: ${Utils.Add_Commas_To_Number(t.total_point_count)}\n`+`    - Letters: ${Utils.Add_Commas_To_Number(t.total_letter_count)} (~${_}%)\n`+`    - Meta-Letters: ${Utils.Add_Commas_To_Number(t.total_meta_letter_count)} (~${i}%)\n`+`    - Non-Letters: ${Utils.Add_Commas_To_Number(t.total_marker_count)} (~${l}%)\n`+e.slice(a,e.length)}yield Write_File("./README.md",e)}))}(t)}))}!function(){__awaiter(this,void 0,void 0,(function*(){yield Generate()}))}();