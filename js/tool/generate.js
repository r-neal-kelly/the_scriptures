var __awaiter=this&&this.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(i,o){function r(e){try{u(s.next(e))}catch(e){o(e)}}function a(e){try{u(s.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}u((s=s.apply(e,t||[])).next())}))};import*as fs from"fs";import*as Utils from"../utils.js";import*as Data from"../model/data.js";import*as Text from"../model/text.js";function Read_Directory(e){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(t,n){fs.readdir(e,{withFileTypes:!0},(function(e,s){null!=e?n(e):t(s)}))}))}))}function Read_File(e){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(t,n){fs.readFile(e,"utf8",(function(e,s){null!=e?n(e):t(s)}))}))}))}function Write_File(e,t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(n,s){fs.writeFile(e,t,"utf8",(function(e){null!=e?s(e):n()}))}))}))}function Folder_Names(e){return __awaiter(this,void 0,void 0,(function*(){const t=[],n=yield Read_Directory(e);for(let e of n)e.isDirectory()&&t.push(e.name);return t}))}function File_Names(e){return __awaiter(this,void 0,void 0,(function*(){const t=[],n=yield Read_Directory(e);for(let e of n)e.isFile()&&t.push(e.name);return t}))}class Unique_Names{constructor(){this.books=new Set,this.languages=new Set,this.versions=new Set}Add_Book(e){this.books.add(e)}Add_Language(e){this.languages.add(e)}Add_Version(e){this.versions.add(e)}Books(){return Array.from(this.books).sort()}Languages(){return Array.from(this.languages).sort()}Versions(){return Array.from(this.versions).sort()}}class Unique_Parts{constructor(){this.parts={}}Add(e){this.parts.hasOwnProperty(e)?(Utils.Assert(this.parts[e]<Number.MAX_SAFE_INTEGER,"Cannot add more of this unique part!"),this.parts[e]+=1):this.parts[e]=1}Values(){return Object.keys(this.parts).sort(function(e,t){return this.parts[t]-this.parts[e]}.bind(this))}Count(e){return Utils.Assert(this.parts.hasOwnProperty(e),"Does not have part."),this.parts[e]}}function Filter_File_Names(e){return/\.txt$/.test(e)&&!/COPY\.txt$/.test(e)}function Generate(){return __awaiter(this,void 0,void 0,(function*(){const e={tree:{books:[]},unique_book_names:[],unique_language_names:[],unique_version_names:[],unique_part_values:[]},t=new Unique_Names,n=new Unique_Parts,s="./Data",i=`${s}/Books`;for(const s of(yield Folder_Names(i)).sort()){const o=`${i}/${s}`,r={name:s,languages:[]};e.tree.books.push(r),t.Add_Book(s);for(const e of(yield Folder_Names(o)).sort()){const s=`${o}/${e}`,i={name:e,versions:[]};r.languages.push(i),t.Add_Language(e);for(const e of(yield Folder_Names(s)).sort()){const o=`${s}/${e}`,r={name:e,files:[]},a=new Text.Dictionary.Instance({json:yield Read_File(`${o}/Dictionary.json`)}),u=(yield File_Names(o)).filter(Filter_File_Names).sort();i.versions.push(r),t.Add_Version(e);for(const[e,t]of u.entries()){const s=`${o}/${t}`,i={name:t,index:e},u=new Text.Instance({dictionary:a,value:yield Read_File(s)});r.files.push(i);for(let e=0,t=u.Line_Count();e<t;e+=1){const t=u.Line(e);for(let e=0,s=t.Macro_Part_Count();e<s;e+=1){const s=t.Macro_Part(e);n.Add(s.Value())}}}}}}e.unique_book_names=t.Books(),e.unique_language_names=t.Languages(),e.unique_version_names=t.Versions(),e.unique_part_values=n.Values(),yield Write_File(`${s}/Info.json`,JSON.stringify(e));const o=new Data.Compressor.Instance({unique_parts:e.unique_part_values});for(const e of(yield Folder_Names(i)).sort()){const t=`${i}/${e}`;for(const e of(yield Folder_Names(t)).sort()){const n=`${t}/${e}`;for(const e of(yield Folder_Names(n)).sort()){const t=`${n}/${e}`,s=(yield File_Names(t)).filter(Filter_File_Names).sort(),i=[];for(const e of s){const n=`${t}/${e}`;i.push(yield Read_File(n))}const r=yield Read_File(`${t}/Dictionary.json`),a=o.Compress_Dictionary(r),u=o.Decompress_Dictionary(a);Utils.Assert(u===r,"Invalid dictionary decompression!"),yield Write_File(`${t}/${Data.Version.Dictionary.Symbol.NAME}`,a);const l=new Text.Dictionary.Instance({json:r}),c=i.join(Data.Version.Symbol.FILE_BREAK),d=o.Compress({value:c,dictionary:l}),_=o.Decompress({value:d,dictionary:l});Utils.Assert(_===c,"Invalid decompression!"),yield Write_File(`${t}/${Data.Version.Text.Symbol.NAME}`,d)}}}}))}!function(){__awaiter(this,void 0,void 0,(function*(){yield Generate()}))}();