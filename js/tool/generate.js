var __awaiter=this&&this.__awaiter||function(e,t,s,i){return new(s||(s=Promise))((function(n,o){function r(e){try{u(i.next(e))}catch(e){o(e)}}function a(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,a)}u((i=i.apply(e,t||[])).next())}))};import*as fs from"fs";import*as Utils from"../utils.js";import*as Data from"../model/data.js";import*as Text from"../model/text.js";function Read_Directory(e){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(t,s){fs.readdir(e,{withFileTypes:!0},(function(e,i){null!=e?s(e):t(i)}))}))}))}function Read_File(e){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(t,s){fs.readFile(e,"utf8",(function(e,i){null!=e?s(e):t(i)}))}))}))}function Write_File(e,t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(s,i){fs.writeFile(e,t,"utf8",(function(e){null!=e?i(e):s()}))}))}))}function Folder_Names(e){return __awaiter(this,void 0,void 0,(function*(){const t=[],s=yield Read_Directory(e);for(let e of s)e.isDirectory()&&t.push(e.name);return t}))}function File_Names(e){return __awaiter(this,void 0,void 0,(function*(){const t=[],s=yield Read_Directory(e);for(let e of s)e.isFile()&&t.push(e.name);return t}))}class Unique_Names{constructor(){this.books=new Set,this.languages=new Set,this.versions=new Set}Add_Book(e){this.books.add(e)}Add_Language(e){this.languages.add(e)}Add_Version(e){this.versions.add(e)}Books(){return Array.from(this.books).sort()}Languages(){return Array.from(this.languages).sort()}Versions(){return Array.from(this.versions).sort()}}class Unique_Parts{constructor(){this.parts={}}Add(e){this.parts.hasOwnProperty(e)?(Utils.Assert(this.parts[e]<Number.MAX_SAFE_INTEGER,"Cannot add more of this unique part!"),this.parts[e]+=1):this.parts[e]=1}Values(){return Object.keys(this.parts).sort(function(e,t){return this.parts[t]-this.parts[e]}.bind(this))}Count(e){return Utils.Assert(this.parts.hasOwnProperty(e),"Does not have part."),this.parts[e]}}function Filter_File_Names(e){return/\.txt$/.test(e)&&!/COPY\.txt$/.test(e)}function Generate(){return __awaiter(this,void 0,void 0,(function*(){const e={tree:{books:[]},unique_book_names:[],unique_language_names:[],unique_version_names:[],unique_part_values:[]},t=new Unique_Names,s=new Unique_Parts,i="./Data",n=`${i}/Books`;for(const i of(yield Folder_Names(n)).sort()){const o=`${n}/${i}`,r={name:i,languages:[]};e.tree.books.push(r),t.Add_Book(i);for(const e of(yield Folder_Names(o)).sort()){const i=`${o}/${e}`,n={name:e,versions:[]};r.languages.push(n),t.Add_Language(e);for(const e of(yield Folder_Names(i)).sort()){const o=`${i}/${e}`,r={name:e,files:[]},a=new Text.Dictionary.Instance({json:yield Read_File(`${o}/Dictionary.json`)}),u=(yield File_Names(o)).filter(Filter_File_Names).sort();n.versions.push(r),t.Add_Version(e);for(const[e,t]of u.entries()){const i=`${o}/${t}`,n={name:t.replace(/\.[^.]*$/,".comp"),index:e},u=new Text.Instance({dictionary:a,value:yield Read_File(i)});r.files.push(n);for(let e=0,t=u.Line_Count();e<t;e+=1){const t=u.Line(e);for(let e=0,i=t.Macro_Part_Count();e<i;e+=1){const i=t.Macro_Part(e);s.Add(i.Value())}}}}}}e.unique_book_names=t.Books(),e.unique_language_names=t.Languages(),e.unique_version_names=t.Versions(),e.unique_part_values=s.Values(),yield Write_File(`${i}/Info.json`,JSON.stringify(e));const o=new Data.Compressor.Instance({unique_parts:e.unique_part_values});for(const e of(yield Folder_Names(n)).sort()){const t=`${n}/${e}`;for(const e of(yield Folder_Names(t)).sort()){const s=`${t}/${e}`;for(const e of(yield Folder_Names(s)).sort()){const t=`${s}/${e}`,i=(yield File_Names(t)).filter(Filter_File_Names).sort(),n=[],r=yield Read_File(`${t}/Dictionary.json`),a=new Text.Dictionary.Instance({json:r}),u=o.Compress_Dictionary(r),l=o.Decompress_Dictionary(u);Utils.Assert(l===r,"Invalid dictionary decompression!"),yield Write_File(`${t}/${Data.Version.Dictionary.Symbol.NAME}.${Data.Version.Dictionary.Symbol.EXTENSION}`,u);for(const e of i){const s=`${t}/${e}`,i=yield Read_File(s);n.push(i);const r=o.Compress({value:i,dictionary:a}),u=o.Decompress({value:r,dictionary:a});Utils.Assert(u===i,"Invalid decompression!"),yield Write_File(`${t}/${e.replace(/\.[^.]*$/,".comp")}`,r)}const c=n.join(Data.Version.Symbol.FILE_BREAK),d=o.Compress({value:c,dictionary:a}),_=o.Decompress({value:d,dictionary:a});Utils.Assert(_===c,"Invalid decompression!"),yield Write_File(`${t}/${Data.Version.Text.Symbol.NAME}.${Data.Version.Text.Symbol.EXTENSION}`,d)}}}}))}!function(){__awaiter(this,void 0,void 0,(function*(){yield Generate()}))}();