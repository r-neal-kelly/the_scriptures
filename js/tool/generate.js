var __awaiter=this&&this.__awaiter||function(t,e,o,_){return new(o||(o=Promise))((function(n,a){function s(t){try{i(_.next(t))}catch(t){a(t)}}function r(t){try{i(_.throw(t))}catch(t){a(t)}}function i(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,r)}i((_=_.apply(t,e||[])).next())}))};import*as process from"process";import*as Utils from"../utils.js";import*as Unicode from"../unicode.js";import*as Language from"../model/language.js";import*as Data from"../model/data.js";import*as Text from"../model/text.js";import*as File_System from"./file_system.js";const TIMESTAMP_PATH="./.timestamp",README_PATH="./README.md",DATA_PATH="./data",INFO_JSON_NAME="Info.json",ORDER_JSON_NAME="Order.json",DICTIONARY_JSON_NAME="Dictionary.json",UNIQUE_PARTS_JSON_NAME="Unique_Parts.json",DEFAULT_LAST_TIMESTAMP=0,LINE_PATH_TYPE=Text.Line.Path_Type.DEFAULT;class Unique_Names{constructor(){this.name_sorter=new Data.Name_Sorter.Instance,this.books=new Set,this.languages=new Set,this.versions=new Set}Add_Book(t){this.books.add(t)}Add_Language(t){this.languages.add(t)}Add_Version(t){this.versions.add(t)}Books(){return this.name_sorter.With_Set(Data.Name_Sorter.Type.BOOKS,this.books)}Languages(){return this.name_sorter.With_Set(Data.Name_Sorter.Type.LANGUAGES,this.languages)}Versions(){return this.name_sorter.With_Set(Data.Name_Sorter.Type.VERSIONS,this.versions)}}class Unique_Parts{constructor(){this.parts={}}Add(t){this.parts.hasOwnProperty(t)?(Utils.Assert(this.parts[t]<Number.MAX_SAFE_INTEGER,"Cannot add more of this unique part!"),this.parts[t]+=1):this.parts[t]=1}Values(){return Object.keys(this.parts).sort(function(t,e){return this.parts[e]-this.parts[t]}.bind(this))}Count(t){return Utils.Assert(this.parts.hasOwnProperty(t),"Does not have part."),this.parts[t]}}function Read_And_Sort_File_Names(t){return __awaiter(this,void 0,void 0,(function*(){return File_System.Has_File(`${t}/${ORDER_JSON_NAME}`)?JSON.parse(yield File_System.Read_File(`${t}/${ORDER_JSON_NAME}`)):(yield File_System.File_Names(t)).filter((function(t){return/\.txt$/.test(t)&&!/COPY\.txt$/.test(t)})).sort()}))}function Read_File_Text(t){return __awaiter(this,void 0,void 0,(function*(){const e=yield File_System.Read_And_Write_File_With_No_Carriage_Returns(t);return Utils.Assert(Language.Greek.Normalize_With_Combined_Points(Language.Greek.Normalize_With_Baked_Points(e))===e,`\n            Failed to reproduce original file_text after Greek normalization!\n            ${t}\n        `),e}))}function Should_Version_Be_Updated(t,e,o){return __awaiter(this,void 0,void 0,(function*(){for(const o of[`${e}/${INFO_JSON_NAME}`,`${e}/${DICTIONARY_JSON_NAME}`,`${e}/${UNIQUE_PARTS_JSON_NAME}`])if(!File_System.Has_File(o)||(yield File_System.Read_Entity_Last_Modified_Time(o))>t)return!0;if(File_System.Has_File(`${e}/${ORDER_JSON_NAME}`)&&(yield File_System.Read_Entity_Last_Modified_Time(`${e}/${ORDER_JSON_NAME}`))>t)return!0;for(const _ of o){const o=`${e}/${_}`;if((yield File_System.Read_Entity_Last_Modified_Time(o))>t)return!0}return!1}))}function Decompression_Line_Mismatches(t,e){const o=t.split(/\r?\n/),_=e.split(/\r?\n/);let n="";for(let t=0,e=o.length;t<e;t+=1)t<_.length?o[t]!==_[t]&&(n+=`${t}: ${o[t]} !== ${_[t]}\n`):n+=`${t}: <missing line>\n`;return""===n?"<no mismatching lines>":n}function Generate(t){return __awaiter(this,void 0,void 0,(function*(){const e=t?0:File_System.Has_File("./.timestamp")?yield File_System.Read_Entity_Last_Modified_Time("./.timestamp"):0,o={tree:{books:[]},unique_book_names:[],unique_language_names:[],unique_version_names:[],total_unit_count:0,total_point_count:0,total_letter_count:0,total_marker_count:0,total_meta_letter_count:0,total_word_count:0,total_break_count:0,total_meta_word_count:0,total_part_count:0,total_line_count:0,total_file_count:0,total_book_count:0},_=new Unique_Names;0===e?console.log("    Forcefully generating all files..."):console.log("    Only generating out-of-date files..."),yield function(){return __awaiter(this,void 0,void 0,(function*(){const t="./data/Books";for(const n of(yield File_System.Folder_Names(t)).sort()){const a=`${t}/${n}`,s={name:n,languages:[]};o.tree.books.push(s),_.Add_Book(n);for(const t of(yield File_System.Folder_Names(a)).sort()){const r=`${a}/${t}`,i={name:t,versions:[]};s.languages.push(i),_.Add_Language(t);for(const a of(yield File_System.Folder_Names(r)).sort()){const s=`${r}/${a}`,l=yield Read_And_Sort_File_Names(s),u={name:a,files:l.map(Utils.Remove_File_Extension)};if(i.versions.push(u),_.Add_Version(a),yield Should_Version_Be_Updated(e,s,l)){const e={total_unit_count:0,total_point_count:0,total_letter_count:0,total_marker_count:0,total_meta_letter_count:0,total_word_count:0,total_break_count:0,total_meta_word_count:0,total_part_count:0,total_line_count:0,total_file_count:0},o=yield File_System.Read_File(`${s}/${DICTIONARY_JSON_NAME}`),_=new Text.Dictionary.Instance({json:o}),r=new Unique_Parts,i=[];Utils.Assert(e.total_file_count+l.length<=Number.MAX_SAFE_INTEGER),_.Validate(),e.total_file_count+=l.length;for(const o of l){const l=`${s}/${o}`,u=yield Read_File_Text(l),c=new Text.Instance({dictionary:_,value:u});Utils.Assert(e.total_line_count+c.Line_Count()<=Number.MAX_SAFE_INTEGER),i.push(u),e.total_line_count+=c.Line_Count();for(let _=0,s=c.Line_Count();_<s;_+=1){const s=c.Line(_);for(let i=0,l=s.Macro_Part_Count(LINE_PATH_TYPE);i<l;i+=1){const l=s.Macro_Part(i,LINE_PATH_TYPE),u=l.Part_Type(),c=l.Value(),m=c.length,d=Unicode.Point_Count(c);if(Utils.Assert(!l.Is_Unknown(),`Unknown part! Cannot generate:\n   Book Name:          ${n}\n   Language Name:      ${t}\n   Version Name:       ${a}\n   File Name:          ${o}\n   Line Index:         ${_}\n   Macro Part Index:   ${i}\n   Macro Part Value:   ${c}\n`),l.Is_Error()&&Utils.Assert(l.Has_Error_Style(),`Error not wrapped with error command! Should not generate:\n   Book Name:          ${n}\n   Language Name:      ${t}\n   Version Name:       ${a}\n   File Name:          ${o}\n   Line Index:         ${_}\n   Macro Part Index:   ${i}\n   Macro Part Value:   ${c}\n`),Utils.Assert(e.total_unit_count+m<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_point_count+d<=Number.MAX_SAFE_INTEGER),r.Add(c),e.total_unit_count+=m,e.total_point_count+=d,u===Text.Part.Type.LETTER)Utils.Assert(e.total_letter_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_letter_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.MARKER)Utils.Assert(e.total_marker_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_marker_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.WORD)Utils.Assert(e.total_letter_count+d<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_word_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_letter_count+=d,e.total_word_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.BREAK)Utils.Assert(e.total_marker_count+d<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_break_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_marker_count+=d,e.total_break_count+=1,e.total_part_count+=1;else if(u===Text.Part.Type.COMMAND){const t=l;Utils.Assert(e.total_meta_letter_count+d<=Number.MAX_SAFE_INTEGER),e.total_meta_letter_count+=d,t.Is_Last_Of_Split()||(Utils.Assert(e.total_meta_word_count+1<=Number.MAX_SAFE_INTEGER),Utils.Assert(e.total_part_count+1<=Number.MAX_SAFE_INTEGER),e.total_meta_word_count+=1,e.total_part_count+=1)}}}}const u=[],c=i.join(Data.Version.Symbol.FILE_BREAK),m=r.Values(),d=new Data.Compressor.Instance({unique_parts:m}),A=d.Compress_Dictionary({dictionary_value:o}),N=d.Decompress_Dictionary({dictionary_value:A}),E=d.Compress_File({dictionary:_,file_value:c}),S=d.Decompress_File({dictionary:_,file_value:E});Utils.Assert(N===o,"Invalid dictionary decompression!"),Utils.Assert(S===c,`Invalid decompression!\n   Book Name: ${n}\n   Language Name: ${t}\n   Version Name: ${a}\n${Decompression_Line_Mismatches(c,S)}`),u.push(File_System.Write_File(`${s}/${INFO_JSON_NAME}`,JSON.stringify(e))),u.push(File_System.Write_File(`${s}/${UNIQUE_PARTS_JSON_NAME}`,JSON.stringify(m))),u.push(File_System.Write_File(`${s}/${Data.Version.Dictionary.Symbol.NAME}.${Data.Version.Dictionary.Symbol.EXTENSION}`,A)),u.push(File_System.Write_File(`${s}/${Data.Version.Text.Symbol.NAME}.${Data.Version.Text.Symbol.EXTENSION}`,E));for(let e=0,o=l.length;e<o;e+=1){const o=l[e],r=i[e],c=d.Compress_File({dictionary:_,file_value:r}),m=d.Decompress_File({dictionary:_,file_value:c});Utils.Assert(m===r,`Invalid decompression!\n   Book Name: ${n}\n   Language Name: ${t}\n   Version Name: ${a}\n   File Name: ${o}\n${Decompression_Line_Mismatches(r,m)}`),u.push(File_System.Write_File(`${s}/${o.replace(/\.[^.]*$/,`.${Data.Version.Dictionary.Symbol.EXTENSION}`)}`,c))}yield Promise.all(u),console.log(`        Generated ${n}/${t}/${a}...`)}const c=JSON.parse(yield File_System.Read_File(`${s}/${INFO_JSON_NAME}`));Utils.Assert(o.total_unit_count+c.total_unit_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_point_count+c.total_point_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_letter_count+c.total_letter_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_marker_count+c.total_marker_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_meta_letter_count+c.total_meta_letter_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_word_count+c.total_word_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_break_count+c.total_break_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_meta_word_count+c.total_meta_word_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_part_count+c.total_part_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_line_count+c.total_line_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_file_count+c.total_file_count<=Number.MAX_SAFE_INTEGER),Utils.Assert(o.total_book_count+1<=Number.MAX_SAFE_INTEGER),o.total_unit_count+=c.total_unit_count,o.total_point_count+=c.total_point_count,o.total_letter_count+=c.total_letter_count,o.total_marker_count+=c.total_marker_count,o.total_meta_letter_count+=c.total_meta_letter_count,o.total_word_count+=c.total_word_count,o.total_break_count+=c.total_break_count,o.total_meta_word_count+=c.total_meta_word_count,o.total_part_count+=c.total_part_count,o.total_line_count+=c.total_line_count,o.total_file_count+=c.total_file_count,o.total_book_count+=1}}}Utils.Assert(o.total_word_count+o.total_meta_word_count+o.total_break_count===o.total_part_count,"Miscount of total_part_count"),Utils.Assert(o.total_letter_count+o.total_meta_letter_count+o.total_marker_count===o.total_point_count,"Miscount of total_point_count."),o.unique_book_names=_.Books(),o.unique_language_names=_.Languages(),o.unique_version_names=_.Versions(),yield File_System.Write_File(`./data/${INFO_JSON_NAME}`,JSON.stringify(o))}))}(),yield function(){return __awaiter(this,void 0,void 0,(function*(){let t=yield File_System.Read_File(README_PATH);const e="## Stats";let _=null,n=null;for(let o=0,a=t.length;o<a;o+=1){const a=t.slice(o);null===_?a.slice(0,e.length)===e&&(_=o):null===n&&"##"===a.slice(0,"##".length)&&(n=o)}if(null!==_){null===n&&(n=t.length);const e=Math.round(100*o.total_word_count/o.total_part_count),a=Math.round(100*o.total_meta_word_count/o.total_part_count),s=Math.round(100*o.total_break_count/o.total_part_count),r=Math.round(100*o.total_letter_count/o.total_point_count),i=Math.round(100*o.total_meta_letter_count/o.total_point_count),l=Math.round(100*o.total_marker_count/o.total_point_count);t=t.slice(0,_)+"## Stats\n\n"+`- Unique Languages: ${Utils.Add_Commas_To_Number(o.unique_language_names.length)}\n`+`- Unique Versions: ${Utils.Add_Commas_To_Number(o.unique_version_names.length)}\n`+`- Unique Books: ${Utils.Add_Commas_To_Number(o.unique_book_names.length)}\n\n<br>\n\n`+`- Total Books: ${Utils.Add_Commas_To_Number(o.total_book_count)}\n`+`- Total Files: ${Utils.Add_Commas_To_Number(o.total_file_count)}\n`+`- Total Lines: ${Utils.Add_Commas_To_Number(o.total_line_count)}\n`+`- Total Parts: ${Utils.Add_Commas_To_Number(o.total_part_count)}\n`+`    - Words: ${Utils.Add_Commas_To_Number(o.total_word_count)} (~${e}%)\n`+`    - Meta-Words: ${Utils.Add_Commas_To_Number(o.total_meta_word_count)} (~${a}%)\n`+`    - Non-Words: ${Utils.Add_Commas_To_Number(o.total_break_count)} (~${s}%)\n`+`- Total Unicode Points: ${Utils.Add_Commas_To_Number(o.total_point_count)}\n`+`    - Letters: ${Utils.Add_Commas_To_Number(o.total_letter_count)} (~${r}%)\n`+`    - Meta-Letters: ${Utils.Add_Commas_To_Number(o.total_meta_letter_count)} (~${i}%)\n`+`    - Non-Letters: ${Utils.Add_Commas_To_Number(o.total_marker_count)} (~${l}%)\n`+t.slice(n,t.length)}yield File_System.Write_File(README_PATH,t)}))}(),yield File_System.Write_File("./.timestamp","")}))}!function(){__awaiter(this,void 0,void 0,(function*(){const t=process.argv.slice(2);yield Generate(t.includes("-f")||t.includes("--force"))}))}();