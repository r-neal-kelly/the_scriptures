var __awaiter=this&&this.__awaiter||function(t,o,e,n){return new(e||(e=Promise))((function(r,a){function s(t){try{i(n.next(t))}catch(t){a(t)}}function _(t){try{i(n.throw(t))}catch(t){a(t)}}function i(t){var o;t.done?r(t.value):(o=t.value,o instanceof e?o:new e((function(t){t(o)}))).then(s,_)}i((n=n.apply(t,o||[])).next())}))};import*as fs from"fs";import*as Utils from"../utils.js";import*as Unicode from"../unicode.js";import*as Language from"../model/language.js";import*as Data from"../model/data.js";import*as Text from"../model/text.js";const LINE_PATH_TYPE=Text.Line.Path_Type.DEFAULT;function Read_Directory(t){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(o,e){fs.readdir(t,{withFileTypes:!0},(function(t,n){null!=t?e(t):o(n)}))}))}))}function Has_File(t){return fs.existsSync(t)}function Read_File(t,o="utf8"){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(e,n){fs.readFile(t,o,(function(t,o){null!=t?n(t):e(o)}))}))}))}function Write_File(t,o,e="utf8"){return __awaiter(this,void 0,void 0,(function*(){return new Promise((function(n,r){fs.writeFile(t,o,e,(function(t){null!=t?r(t):n()}))}))}))}function Folder_Names(t){return __awaiter(this,void 0,void 0,(function*(){const o=[],e=yield Read_Directory(t);for(let t of e)t.isDirectory()&&o.push(t.name);return o}))}function File_Names(t){return __awaiter(this,void 0,void 0,(function*(){const o=[],e=yield Read_Directory(t);for(let t of e)t.isFile()&&o.push(t.name);return o}))}class Unique_Names{constructor(){this.books=new Set,this.languages=new Set,this.versions=new Set}Add_Book(t){this.books.add(t)}Add_Language(t){this.languages.add(t)}Add_Version(t){this.versions.add(t)}Books(){return Array.from(this.books).sort()}Languages(){return Array.from(this.languages).sort()}Versions(){return Array.from(this.versions).sort()}}class Unique_Parts{constructor(){this.parts={}}Add(t){this.parts.hasOwnProperty(t)?(Utils.Assert(this.parts[t]<Number.MAX_SAFE_INTEGER,"Cannot add more of this unique part!"),this.parts[t]+=1):this.parts[t]=1}Values(){return Object.keys(this.parts).sort(function(t,o){return this.parts[o]-this.parts[t]}.bind(this))}Count(t){return Utils.Assert(this.parts.hasOwnProperty(t),"Does not have part."),this.parts[t]}}function Filter_File_Names(t){return/\.txt$/.test(t)&&!/COPY\.txt$/.test(t)}function Sorted_File_Names(t){return __awaiter(this,void 0,void 0,(function*(){return Has_File(`${t}/Order.json`)?JSON.parse(yield Read_File(`${t}/Order.json`)):(yield File_Names(t)).filter(Filter_File_Names).sort()}))}function Assert_Greek_Normalization(t,o){Utils.Assert(Language.Greek.Normalize_With_Combined_Points(Language.Greek.Normalize_With_Baked_Points(o))===o,`\n            failed to reproduce original file_text after Greek normalization\n            ${t}\n        `)}function Generate(){return __awaiter(this,void 0,void 0,(function*(){const t={tree:{books:[]},unique_book_names:[],unique_language_names:[],unique_version_names:[],unique_part_values:{},total_unit_count:0,total_point_count:0,total_letter_count:0,total_marker_count:0,total_meta_letter_count:0,total_word_count:0,total_break_count:0,total_meta_word_count:0,total_part_count:0,total_line_count:0,total_file_count:0,total_book_count:0},o=new Unique_Names,e={};function n(t,o){const e=o.Part_Type(),n=o.Value(),r=n.length,a=Unicode.Point_Count(n);if(Utils.Assert(t.total_unit_count+r<=Number.MAX_SAFE_INTEGER),t.total_unit_count+=r,Utils.Assert(t.total_point_count+a<=Number.MAX_SAFE_INTEGER),t.total_point_count+=a,e===Text.Part.Type.LETTER)Utils.Assert(t.total_letter_count+1<=Number.MAX_SAFE_INTEGER),t.total_letter_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(e===Text.Part.Type.MARKER)Utils.Assert(t.total_marker_count+1<=Number.MAX_SAFE_INTEGER),t.total_marker_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(e===Text.Part.Type.WORD)Utils.Assert(t.total_letter_count+a<=Number.MAX_SAFE_INTEGER),t.total_letter_count+=a,Utils.Assert(t.total_word_count+1<=Number.MAX_SAFE_INTEGER),t.total_word_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(e===Text.Part.Type.BREAK)Utils.Assert(t.total_marker_count+a<=Number.MAX_SAFE_INTEGER),t.total_marker_count+=a,Utils.Assert(t.total_break_count+1<=Number.MAX_SAFE_INTEGER),t.total_break_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1;else if(e===Text.Part.Type.COMMAND){const e=o;Utils.Assert(t.total_meta_letter_count+a<=Number.MAX_SAFE_INTEGER),t.total_meta_letter_count+=a,e.Is_Last_Of_Split()||(Utils.Assert(t.total_meta_word_count+1<=Number.MAX_SAFE_INTEGER),t.total_meta_word_count+=1,Utils.Assert(t.total_part_count+1<=Number.MAX_SAFE_INTEGER),t.total_part_count+=1)}}const r="./data",a=`${r}/Books`;for(const r of(yield Folder_Names(a)).sort()){const s=`${a}/${r}`,_={name:r,languages:[]};t.tree.books.push(_),o.Add_Book(r);for(const r of(yield Folder_Names(s)).sort()){const a=`${s}/${r}`,i={name:r,versions:[]};_.languages.push(i),o.Add_Language(r),null==e[r]&&(e[r]=new Unique_Parts);for(const s of(yield Folder_Names(a)).sort()){const _=`${a}/${s}`,l={name:s,files:[]},u=new Text.Dictionary.Instance({json:yield Read_File(`${_}/Dictionary.json`)}),c=yield Sorted_File_Names(_);i.versions.push(l),o.Add_Version(s),u.Validate(),t.total_book_count+=1,t.total_file_count+=c.length;for(const o of c){const a=`${_}/${o}`,s=Utils.Remove_File_Extension(o),i=new Text.Instance({dictionary:u,value:yield Read_File(a)});l.files.push(s),t.total_line_count+=i.Line_Count();for(let o=0,a=i.Line_Count();o<a;o+=1){const a=i.Line(o);for(let o=0,s=a.Macro_Part_Count(LINE_PATH_TYPE);o<s;o+=1){const s=a.Macro_Part(o,LINE_PATH_TYPE);e[r].Add(s.Value()),n(t,s)}}}}}}t.unique_book_names=o.Books(),t.unique_language_names=o.Languages(),t.unique_version_names=o.Versions();for(const o of Object.keys(e))t.unique_part_values[o]=e[o].Values();Utils.Assert(t.total_word_count+t.total_meta_word_count+t.total_break_count===t.total_part_count,"Miscount of total_part_count"),Utils.Assert(t.total_letter_count+t.total_meta_letter_count+t.total_marker_count===t.total_point_count,"Miscount of total_point_count"),yield Write_File(`${r}/Info.json`,JSON.stringify(t));for(const o of(yield Folder_Names(a)).sort()){const e=`${a}/${o}`;for(const o of(yield Folder_Names(e)).sort()){const n=`${e}/${o}`,r=new Data.Compressor.Instance({unique_parts:t.unique_part_values[o]});for(const t of(yield Folder_Names(n)).sort()){const o=`${n}/${t}`,e=yield Sorted_File_Names(o),a=[],s=yield Read_File(`${o}/Dictionary.json`),_=new Text.Dictionary.Instance({json:s}),i=r.Compress_Dictionary(s),l=r.Decompress_Dictionary(i);Utils.Assert(l===s,"Invalid dictionary decompression!"),yield Write_File(`${o}/${Data.Version.Dictionary.Symbol.NAME}.${Data.Version.Dictionary.Symbol.EXTENSION}`,i);for(const t of e){const e=`${o}/${t}`,n=yield Read_File(e);a.push(n),Assert_Greek_Normalization(e,n);const s=r.Compress({value:n,dictionary:_}),i=r.Decompress({value:s,dictionary:_});Utils.Assert(i===n,"Invalid decompression!"),yield Write_File(`${o}/${t.replace(/\.[^.]*$/,`.${Data.Version.Dictionary.Symbol.EXTENSION}`)}`,s)}const u=a.join(Data.Version.Symbol.FILE_BREAK),c=r.Compress({value:u,dictionary:_}),d=r.Decompress({value:c,dictionary:_});Utils.Assert(d===u,"Invalid decompression!"),yield Write_File(`${o}/${Data.Version.Text.Symbol.NAME}.${Data.Version.Text.Symbol.EXTENSION}`,c)}}}yield function(t){return __awaiter(this,void 0,void 0,(function*(){let o=yield Read_File("./README.md");const e="## Stats";let n=null,r=null;for(let t=0,a=o.length;t<a;t+=1){const a=o.slice(t);null===n?a.slice(0,e.length)===e&&(n=t):null===r&&"##"===a.slice(0,"##".length)&&(r=t)}if(null!==n){null===r&&(r=o.length);const e=Math.round(100*t.total_word_count/t.total_part_count),a=Math.round(100*t.total_meta_word_count/t.total_part_count),s=Math.round(100*t.total_break_count/t.total_part_count),_=Math.round(100*t.total_letter_count/t.total_point_count),i=Math.round(100*t.total_meta_letter_count/t.total_point_count),l=Math.round(100*t.total_marker_count/t.total_point_count);o=o.slice(0,n)+"## Stats\n\n"+`- Unique Languages: ${Utils.Add_Commas_To_Number(t.unique_language_names.length)}\n`+`- Unique Versions: ${Utils.Add_Commas_To_Number(t.unique_version_names.length)}\n`+`- Unique Books: ${Utils.Add_Commas_To_Number(t.unique_book_names.length)}\n\n<br>\n\n`+`- Total Books: ${Utils.Add_Commas_To_Number(t.total_book_count)}\n`+`- Total Files: ${Utils.Add_Commas_To_Number(t.total_file_count)}\n`+`- Total Lines: ${Utils.Add_Commas_To_Number(t.total_line_count)}\n`+`- Total Parts: ${Utils.Add_Commas_To_Number(t.total_part_count)}\n`+`    - Words: ${Utils.Add_Commas_To_Number(t.total_word_count)} (~${e}%)\n`+`    - Meta-Words: ${Utils.Add_Commas_To_Number(t.total_meta_word_count)} (~${a}%)\n`+`    - Non-Words: ${Utils.Add_Commas_To_Number(t.total_break_count)} (~${s}%)\n`+`- Total Unicode Points: ${Utils.Add_Commas_To_Number(t.total_point_count)}\n`+`    - Letters: ${Utils.Add_Commas_To_Number(t.total_letter_count)} (~${_}%)\n`+`    - Meta-Letters: ${Utils.Add_Commas_To_Number(t.total_meta_letter_count)} (~${i}%)\n`+`    - Non-Letters: ${Utils.Add_Commas_To_Number(t.total_marker_count)} (~${l}%)\n`+o.slice(r,o.length)}yield Write_File("./README.md",o)}))}(t)}))}!function(){__awaiter(this,void 0,void 0,(function*(){yield Generate()}))}();